// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/workspace_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Visibility, visibilityFromJSON, visibilityToNumber } from "./common";
import { Subscription } from "./subscription_service";

export const protobufPackage = "monotreme.api.v1";

export interface WorkspaceProfile {
  /** Current workspace mode: dev, prod. */
  mode: string;
  /** Current workspace version. */
  version: string;
  /**
   * The owner name.
   * Format: "users/{id}"
   */
  owner: string;
  /** The workspace subscription. */
  subscription?:
    | Subscription
    | undefined;
  /** The custom style. */
  customStyle: string;
  /** The workspace branding. */
  branding: Uint8Array;
}

export interface WorkspaceSetting {
  /** The url of instance. */
  instanceUrl: string;
  /** The workspace custome branding. */
  branding: Uint8Array;
  /** The custom style. */
  customStyle: string;
  /** The default visibility of shortcuts and collections. */
  defaultVisibility: Visibility;
  /** The identity providers. */
  identityProviders: IdentityProvider[];
  /** Whether to disallow user registration by email&password. */
  disallowUserRegistration: boolean;
  /** Whether to disallow password authentication. */
  disallowPasswordAuth: boolean;
  /** The prefix used for shortcut URLs (e.g. "s" for "/s/shortcut-name"). */
  shortcutPrefix: string;
}

export interface IdentityProvider {
  /** The unique identifier of the identity provider. */
  id: string;
  title: string;
  type: IdentityProvider_Type;
  config?: IdentityProviderConfig | undefined;
}

export enum IdentityProvider_Type {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  OAUTH2 = "OAUTH2",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function identityProvider_TypeFromJSON(object: any): IdentityProvider_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return IdentityProvider_Type.TYPE_UNSPECIFIED;
    case 1:
    case "OAUTH2":
      return IdentityProvider_Type.OAUTH2;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IdentityProvider_Type.UNRECOGNIZED;
  }
}

export function identityProvider_TypeToNumber(object: IdentityProvider_Type): number {
  switch (object) {
    case IdentityProvider_Type.TYPE_UNSPECIFIED:
      return 0;
    case IdentityProvider_Type.OAUTH2:
      return 1;
    case IdentityProvider_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface IdentityProviderConfig {
  oauth2?: IdentityProviderConfig_OAuth2Config | undefined;
}

export interface IdentityProviderConfig_FieldMapping {
  identifier: string;
  displayName: string;
}

export interface IdentityProviderConfig_OAuth2Config {
  clientId: string;
  clientSecret: string;
  authUrl: string;
  tokenUrl: string;
  userInfoUrl: string;
  scopes: string[];
  fieldMapping?: IdentityProviderConfig_FieldMapping | undefined;
}

export interface GetWorkspaceProfileRequest {
}

export interface GetWorkspaceSettingRequest {
}

export interface UpdateWorkspaceSettingRequest {
  /** The user setting. */
  setting?:
    | WorkspaceSetting
    | undefined;
  /** The update mask. */
  updateMask?: string[] | undefined;
}

export interface GetWorkspaceStatsRequest {
}

export interface WorkspaceStats {
  /** Total number of shortcuts in the system */
  totalShortcuts: number;
  /** Total number of users in the system */
  totalUsers: number;
  /** Total number of collections in the system */
  totalCollections: number;
  /** Total number of hits from all shortcuts in the system */
  totalHits: number;
  /** Historical measurements for sparkline graphs (last 100 measurements) */
  historicalData: StatsMeasurement[];
}

export interface StatsMeasurement {
  /** Unix timestamp when the measurement was taken */
  measuredTs: number;
  /** Total number of shortcuts at measurement time */
  shortcutsCount: number;
  /** Total number of users at measurement time */
  usersCount: number;
  /** Total number of collections at measurement time */
  collectionsCount: number;
  /** Total number of hits (shortcut views) at measurement time */
  hitsCount: number;
}

function createBaseWorkspaceProfile(): WorkspaceProfile {
  return { mode: "", version: "", owner: "", subscription: undefined, customStyle: "", branding: new Uint8Array(0) };
}

export const WorkspaceProfile: MessageFns<WorkspaceProfile> = {
  encode(message: WorkspaceProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== "") {
      writer.uint32(10).string(message.mode);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.subscription !== undefined) {
      Subscription.encode(message.subscription, writer.uint32(34).fork()).join();
    }
    if (message.customStyle !== "") {
      writer.uint32(42).string(message.customStyle);
    }
    if (message.branding.length !== 0) {
      writer.uint32(50).bytes(message.branding);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subscription = Subscription.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customStyle = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.branding = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceProfile>): WorkspaceProfile {
    return WorkspaceProfile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceProfile>): WorkspaceProfile {
    const message = createBaseWorkspaceProfile();
    message.mode = object.mode ?? "";
    message.version = object.version ?? "";
    message.owner = object.owner ?? "";
    message.subscription = (object.subscription !== undefined && object.subscription !== null)
      ? Subscription.fromPartial(object.subscription)
      : undefined;
    message.customStyle = object.customStyle ?? "";
    message.branding = object.branding ?? new Uint8Array(0);
    return message;
  },
};

function createBaseWorkspaceSetting(): WorkspaceSetting {
  return {
    instanceUrl: "",
    branding: new Uint8Array(0),
    customStyle: "",
    defaultVisibility: Visibility.VISIBILITY_UNSPECIFIED,
    identityProviders: [],
    disallowUserRegistration: false,
    disallowPasswordAuth: false,
    shortcutPrefix: "",
  };
}

export const WorkspaceSetting: MessageFns<WorkspaceSetting> = {
  encode(message: WorkspaceSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceUrl !== "") {
      writer.uint32(10).string(message.instanceUrl);
    }
    if (message.branding.length !== 0) {
      writer.uint32(18).bytes(message.branding);
    }
    if (message.customStyle !== "") {
      writer.uint32(26).string(message.customStyle);
    }
    if (message.defaultVisibility !== Visibility.VISIBILITY_UNSPECIFIED) {
      writer.uint32(32).int32(visibilityToNumber(message.defaultVisibility));
    }
    for (const v of message.identityProviders) {
      IdentityProvider.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.disallowUserRegistration !== false) {
      writer.uint32(48).bool(message.disallowUserRegistration);
    }
    if (message.disallowPasswordAuth !== false) {
      writer.uint32(56).bool(message.disallowPasswordAuth);
    }
    if (message.shortcutPrefix !== "") {
      writer.uint32(66).string(message.shortcutPrefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instanceUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.branding = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.customStyle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.defaultVisibility = visibilityFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.identityProviders.push(IdentityProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disallowUserRegistration = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.disallowPasswordAuth = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.shortcutPrefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    return WorkspaceSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    const message = createBaseWorkspaceSetting();
    message.instanceUrl = object.instanceUrl ?? "";
    message.branding = object.branding ?? new Uint8Array(0);
    message.customStyle = object.customStyle ?? "";
    message.defaultVisibility = object.defaultVisibility ?? Visibility.VISIBILITY_UNSPECIFIED;
    message.identityProviders = object.identityProviders?.map((e) => IdentityProvider.fromPartial(e)) || [];
    message.disallowUserRegistration = object.disallowUserRegistration ?? false;
    message.disallowPasswordAuth = object.disallowPasswordAuth ?? false;
    message.shortcutPrefix = object.shortcutPrefix ?? "";
    return message;
  },
};

function createBaseIdentityProvider(): IdentityProvider {
  return { id: "", title: "", type: IdentityProvider_Type.TYPE_UNSPECIFIED, config: undefined };
}

export const IdentityProvider: MessageFns<IdentityProvider> = {
  encode(message: IdentityProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.type !== IdentityProvider_Type.TYPE_UNSPECIFIED) {
      writer.uint32(24).int32(identityProvider_TypeToNumber(message.type));
    }
    if (message.config !== undefined) {
      IdentityProviderConfig.encode(message.config, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = identityProvider_TypeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.config = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IdentityProvider>): IdentityProvider {
    return IdentityProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityProvider>): IdentityProvider {
    const message = createBaseIdentityProvider();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? IdentityProvider_Type.TYPE_UNSPECIFIED;
    message.config = (object.config !== undefined && object.config !== null)
      ? IdentityProviderConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseIdentityProviderConfig(): IdentityProviderConfig {
  return { oauth2: undefined };
}

export const IdentityProviderConfig: MessageFns<IdentityProviderConfig> = {
  encode(message: IdentityProviderConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oauth2 !== undefined) {
      IdentityProviderConfig_OAuth2Config.encode(message.oauth2, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProviderConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProviderConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oauth2 = IdentityProviderConfig_OAuth2Config.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IdentityProviderConfig>): IdentityProviderConfig {
    return IdentityProviderConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityProviderConfig>): IdentityProviderConfig {
    const message = createBaseIdentityProviderConfig();
    message.oauth2 = (object.oauth2 !== undefined && object.oauth2 !== null)
      ? IdentityProviderConfig_OAuth2Config.fromPartial(object.oauth2)
      : undefined;
    return message;
  },
};

function createBaseIdentityProviderConfig_FieldMapping(): IdentityProviderConfig_FieldMapping {
  return { identifier: "", displayName: "" };
}

export const IdentityProviderConfig_FieldMapping: MessageFns<IdentityProviderConfig_FieldMapping> = {
  encode(message: IdentityProviderConfig_FieldMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== "") {
      writer.uint32(10).string(message.identifier);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProviderConfig_FieldMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProviderConfig_FieldMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IdentityProviderConfig_FieldMapping>): IdentityProviderConfig_FieldMapping {
    return IdentityProviderConfig_FieldMapping.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityProviderConfig_FieldMapping>): IdentityProviderConfig_FieldMapping {
    const message = createBaseIdentityProviderConfig_FieldMapping();
    message.identifier = object.identifier ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseIdentityProviderConfig_OAuth2Config(): IdentityProviderConfig_OAuth2Config {
  return {
    clientId: "",
    clientSecret: "",
    authUrl: "",
    tokenUrl: "",
    userInfoUrl: "",
    scopes: [],
    fieldMapping: undefined,
  };
}

export const IdentityProviderConfig_OAuth2Config: MessageFns<IdentityProviderConfig_OAuth2Config> = {
  encode(message: IdentityProviderConfig_OAuth2Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(18).string(message.clientSecret);
    }
    if (message.authUrl !== "") {
      writer.uint32(26).string(message.authUrl);
    }
    if (message.tokenUrl !== "") {
      writer.uint32(34).string(message.tokenUrl);
    }
    if (message.userInfoUrl !== "") {
      writer.uint32(42).string(message.userInfoUrl);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.fieldMapping !== undefined) {
      IdentityProviderConfig_FieldMapping.encode(message.fieldMapping, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProviderConfig_OAuth2Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProviderConfig_OAuth2Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userInfoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fieldMapping = IdentityProviderConfig_FieldMapping.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IdentityProviderConfig_OAuth2Config>): IdentityProviderConfig_OAuth2Config {
    return IdentityProviderConfig_OAuth2Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityProviderConfig_OAuth2Config>): IdentityProviderConfig_OAuth2Config {
    const message = createBaseIdentityProviderConfig_OAuth2Config();
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authUrl = object.authUrl ?? "";
    message.tokenUrl = object.tokenUrl ?? "";
    message.userInfoUrl = object.userInfoUrl ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.fieldMapping = (object.fieldMapping !== undefined && object.fieldMapping !== null)
      ? IdentityProviderConfig_FieldMapping.fromPartial(object.fieldMapping)
      : undefined;
    return message;
  },
};

function createBaseGetWorkspaceProfileRequest(): GetWorkspaceProfileRequest {
  return {};
}

export const GetWorkspaceProfileRequest: MessageFns<GetWorkspaceProfileRequest> = {
  encode(_: GetWorkspaceProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspaceProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspaceProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetWorkspaceProfileRequest>): GetWorkspaceProfileRequest {
    return GetWorkspaceProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetWorkspaceProfileRequest>): GetWorkspaceProfileRequest {
    const message = createBaseGetWorkspaceProfileRequest();
    return message;
  },
};

function createBaseGetWorkspaceSettingRequest(): GetWorkspaceSettingRequest {
  return {};
}

export const GetWorkspaceSettingRequest: MessageFns<GetWorkspaceSettingRequest> = {
  encode(_: GetWorkspaceSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspaceSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspaceSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetWorkspaceSettingRequest>): GetWorkspaceSettingRequest {
    return GetWorkspaceSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetWorkspaceSettingRequest>): GetWorkspaceSettingRequest {
    const message = createBaseGetWorkspaceSettingRequest();
    return message;
  },
};

function createBaseUpdateWorkspaceSettingRequest(): UpdateWorkspaceSettingRequest {
  return { setting: undefined, updateMask: undefined };
}

export const UpdateWorkspaceSettingRequest: MessageFns<UpdateWorkspaceSettingRequest> = {
  encode(message: UpdateWorkspaceSettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.setting !== undefined) {
      WorkspaceSetting.encode(message.setting, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkspaceSettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkspaceSettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.setting = WorkspaceSetting.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateWorkspaceSettingRequest>): UpdateWorkspaceSettingRequest {
    return UpdateWorkspaceSettingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkspaceSettingRequest>): UpdateWorkspaceSettingRequest {
    const message = createBaseUpdateWorkspaceSettingRequest();
    message.setting = (object.setting !== undefined && object.setting !== null)
      ? WorkspaceSetting.fromPartial(object.setting)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseGetWorkspaceStatsRequest(): GetWorkspaceStatsRequest {
  return {};
}

export const GetWorkspaceStatsRequest: MessageFns<GetWorkspaceStatsRequest> = {
  encode(_: GetWorkspaceStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspaceStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspaceStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetWorkspaceStatsRequest>): GetWorkspaceStatsRequest {
    return GetWorkspaceStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetWorkspaceStatsRequest>): GetWorkspaceStatsRequest {
    const message = createBaseGetWorkspaceStatsRequest();
    return message;
  },
};

function createBaseWorkspaceStats(): WorkspaceStats {
  return { totalShortcuts: 0, totalUsers: 0, totalCollections: 0, totalHits: 0, historicalData: [] };
}

export const WorkspaceStats: MessageFns<WorkspaceStats> = {
  encode(message: WorkspaceStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalShortcuts !== 0) {
      writer.uint32(8).int32(message.totalShortcuts);
    }
    if (message.totalUsers !== 0) {
      writer.uint32(16).int32(message.totalUsers);
    }
    if (message.totalCollections !== 0) {
      writer.uint32(24).int32(message.totalCollections);
    }
    if (message.totalHits !== 0) {
      writer.uint32(32).int32(message.totalHits);
    }
    for (const v of message.historicalData) {
      StatsMeasurement.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalShortcuts = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalUsers = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCollections = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalHits = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.historicalData.push(StatsMeasurement.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceStats>): WorkspaceStats {
    return WorkspaceStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceStats>): WorkspaceStats {
    const message = createBaseWorkspaceStats();
    message.totalShortcuts = object.totalShortcuts ?? 0;
    message.totalUsers = object.totalUsers ?? 0;
    message.totalCollections = object.totalCollections ?? 0;
    message.totalHits = object.totalHits ?? 0;
    message.historicalData = object.historicalData?.map((e) => StatsMeasurement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStatsMeasurement(): StatsMeasurement {
  return { measuredTs: 0, shortcutsCount: 0, usersCount: 0, collectionsCount: 0, hitsCount: 0 };
}

export const StatsMeasurement: MessageFns<StatsMeasurement> = {
  encode(message: StatsMeasurement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.measuredTs !== 0) {
      writer.uint32(8).int64(message.measuredTs);
    }
    if (message.shortcutsCount !== 0) {
      writer.uint32(16).int32(message.shortcutsCount);
    }
    if (message.usersCount !== 0) {
      writer.uint32(24).int32(message.usersCount);
    }
    if (message.collectionsCount !== 0) {
      writer.uint32(32).int32(message.collectionsCount);
    }
    if (message.hitsCount !== 0) {
      writer.uint32(40).int32(message.hitsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatsMeasurement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatsMeasurement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.measuredTs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.shortcutsCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.usersCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.collectionsCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hitsCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StatsMeasurement>): StatsMeasurement {
    return StatsMeasurement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StatsMeasurement>): StatsMeasurement {
    const message = createBaseStatsMeasurement();
    message.measuredTs = object.measuredTs ?? 0;
    message.shortcutsCount = object.shortcutsCount ?? 0;
    message.usersCount = object.usersCount ?? 0;
    message.collectionsCount = object.collectionsCount ?? 0;
    message.hitsCount = object.hitsCount ?? 0;
    return message;
  },
};

export type WorkspaceServiceDefinition = typeof WorkspaceServiceDefinition;
export const WorkspaceServiceDefinition = {
  name: "WorkspaceService",
  fullName: "monotreme.api.v1.WorkspaceService",
  methods: {
    getWorkspaceProfile: {
      name: "GetWorkspaceProfile",
      requestType: GetWorkspaceProfileRequest,
      requestStream: false,
      responseType: WorkspaceProfile,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
        },
      },
    },
    getWorkspaceSetting: {
      name: "GetWorkspaceSetting",
      requestType: GetWorkspaceSettingRequest,
      requestStream: false,
      responseType: WorkspaceSetting,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
            ]),
          ],
        },
      },
    },
    updateWorkspaceSetting: {
      name: "UpdateWorkspaceSetting",
      requestType: UpdateWorkspaceSettingRequest,
      requestStream: false,
      responseType: WorkspaceSetting,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              19,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            new Uint8Array([
              36,
              58,
              7,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              50,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
            ]),
          ],
        },
      },
    },
    getWorkspaceStats: {
      name: "GetWorkspaceStats",
      requestType: GetWorkspaceStatsRequest,
      requestStream: false,
      responseType: WorkspaceStats,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              25,
              18,
              23,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              116,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
