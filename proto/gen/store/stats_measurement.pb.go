// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: store/stats_measurement.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StatsMeasurement represents a single measurement of workspace statistics at a specific time
type StatsMeasurement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the measurement
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unix timestamp when the measurement was taken
	MeasuredTs int64 `protobuf:"varint,2,opt,name=measured_ts,json=measuredTs,proto3" json:"measured_ts,omitempty"`
	// Total number of shortcuts at measurement time
	ShortcutsCount int32 `protobuf:"varint,3,opt,name=shortcuts_count,json=shortcutsCount,proto3" json:"shortcuts_count,omitempty"`
	// Total number of users at measurement time
	UsersCount int32 `protobuf:"varint,4,opt,name=users_count,json=usersCount,proto3" json:"users_count,omitempty"`
	// Total number of collections at measurement time
	CollectionsCount int32 `protobuf:"varint,5,opt,name=collections_count,json=collectionsCount,proto3" json:"collections_count,omitempty"`
	// Total number of hits (shortcut views) at measurement time
	HitsCount     int32 `protobuf:"varint,6,opt,name=hits_count,json=hitsCount,proto3" json:"hits_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatsMeasurement) Reset() {
	*x = StatsMeasurement{}
	mi := &file_store_stats_measurement_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsMeasurement) ProtoMessage() {}

func (x *StatsMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_store_stats_measurement_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsMeasurement.ProtoReflect.Descriptor instead.
func (*StatsMeasurement) Descriptor() ([]byte, []int) {
	return file_store_stats_measurement_proto_rawDescGZIP(), []int{0}
}

func (x *StatsMeasurement) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatsMeasurement) GetMeasuredTs() int64 {
	if x != nil {
		return x.MeasuredTs
	}
	return 0
}

func (x *StatsMeasurement) GetShortcutsCount() int32 {
	if x != nil {
		return x.ShortcutsCount
	}
	return 0
}

func (x *StatsMeasurement) GetUsersCount() int32 {
	if x != nil {
		return x.UsersCount
	}
	return 0
}

func (x *StatsMeasurement) GetCollectionsCount() int32 {
	if x != nil {
		return x.CollectionsCount
	}
	return 0
}

func (x *StatsMeasurement) GetHitsCount() int32 {
	if x != nil {
		return x.HitsCount
	}
	return 0
}

var File_store_stats_measurement_proto protoreflect.FileDescriptor

const file_store_stats_measurement_proto_rawDesc = "" +
	"\n" +
	"\x1dstore/stats_measurement.proto\x12\x0fmonotreme.store\"\xd9\x01\n" +
	"\x10StatsMeasurement\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vmeasured_ts\x18\x02 \x01(\x03R\n" +
	"measuredTs\x12'\n" +
	"\x0fshortcuts_count\x18\x03 \x01(\x05R\x0eshortcutsCount\x12\x1f\n" +
	"\vusers_count\x18\x04 \x01(\x05R\n" +
	"usersCount\x12+\n" +
	"\x11collections_count\x18\x05 \x01(\x05R\x10collectionsCount\x12\x1d\n" +
	"\n" +
	"hits_count\x18\x06 \x01(\x05R\thitsCountB\xb6\x01\n" +
	"\x13com.monotreme.storeB\x15StatsMeasurementProtoP\x01Z+github.com/bshort/monotreme/proto/gen/store\xa2\x02\x03MSX\xaa\x02\x0fMonotreme.Store\xca\x02\x0fMonotreme\\Store\xe2\x02\x1bMonotreme\\Store\\GPBMetadata\xea\x02\x10Monotreme::Storeb\x06proto3"

var (
	file_store_stats_measurement_proto_rawDescOnce sync.Once
	file_store_stats_measurement_proto_rawDescData []byte
)

func file_store_stats_measurement_proto_rawDescGZIP() []byte {
	file_store_stats_measurement_proto_rawDescOnce.Do(func() {
		file_store_stats_measurement_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_stats_measurement_proto_rawDesc), len(file_store_stats_measurement_proto_rawDesc)))
	})
	return file_store_stats_measurement_proto_rawDescData
}

var file_store_stats_measurement_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_store_stats_measurement_proto_goTypes = []any{
	(*StatsMeasurement)(nil), // 0: monotreme.store.StatsMeasurement
}
var file_store_stats_measurement_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_store_stats_measurement_proto_init() }
func file_store_stats_measurement_proto_init() {
	if File_store_stats_measurement_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_stats_measurement_proto_rawDesc), len(file_store_stats_measurement_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_stats_measurement_proto_goTypes,
		DependencyIndexes: file_store_stats_measurement_proto_depIdxs,
		MessageInfos:      file_store_stats_measurement_proto_msgTypes,
	}.Build()
	File_store_stats_measurement_proto = out.File
	file_store_stats_measurement_proto_goTypes = nil
	file_store_stats_measurement_proto_depIdxs = nil
}
