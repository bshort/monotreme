// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/workspace_setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Visibility, visibilityFromJSON, visibilityToNumber } from "./common";
import { IdentityProvider } from "./idp";

export const protobufPackage = "monotreme.store";

export enum WorkspaceSettingKey {
  WORKSPACE_SETTING_KEY_UNSPECIFIED = "WORKSPACE_SETTING_KEY_UNSPECIFIED",
  /** WORKSPACE_SETTING_GENERAL - Workspace general settings. */
  WORKSPACE_SETTING_GENERAL = "WORKSPACE_SETTING_GENERAL",
  /** WORKSPACE_SETTING_SECURITY - Workspace security settings. */
  WORKSPACE_SETTING_SECURITY = "WORKSPACE_SETTING_SECURITY",
  /** WORKSPACE_SETTING_SHORTCUT_RELATED - Workspace shortcut-related settings. */
  WORKSPACE_SETTING_SHORTCUT_RELATED = "WORKSPACE_SETTING_SHORTCUT_RELATED",
  /** WORKSPACE_SETTING_IDENTITY_PROVIDER - Workspace identity provider settings. */
  WORKSPACE_SETTING_IDENTITY_PROVIDER = "WORKSPACE_SETTING_IDENTITY_PROVIDER",
  /**
   * WORKSPACE_SETTING_LICENSE_KEY - TODO: remove the following keys.
   * The license key.
   */
  WORKSPACE_SETTING_LICENSE_KEY = "WORKSPACE_SETTING_LICENSE_KEY",
  /** WORKSPACE_SETTING_SECRET_SESSION - The secret session key used to encrypt session data. */
  WORKSPACE_SETTING_SECRET_SESSION = "WORKSPACE_SETTING_SECRET_SESSION",
  /** WORKSPACE_SETTING_CUSTOM_STYLE - The custom style. */
  WORKSPACE_SETTING_CUSTOM_STYLE = "WORKSPACE_SETTING_CUSTOM_STYLE",
  /** WORKSPACE_SETTING_DEFAULT_VISIBILITY - The default visibility of shortcuts and collections. */
  WORKSPACE_SETTING_DEFAULT_VISIBILITY = "WORKSPACE_SETTING_DEFAULT_VISIBILITY",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function workspaceSettingKeyFromJSON(object: any): WorkspaceSettingKey {
  switch (object) {
    case 0:
    case "WORKSPACE_SETTING_KEY_UNSPECIFIED":
      return WorkspaceSettingKey.WORKSPACE_SETTING_KEY_UNSPECIFIED;
    case 1:
    case "WORKSPACE_SETTING_GENERAL":
      return WorkspaceSettingKey.WORKSPACE_SETTING_GENERAL;
    case 2:
    case "WORKSPACE_SETTING_SECURITY":
      return WorkspaceSettingKey.WORKSPACE_SETTING_SECURITY;
    case 3:
    case "WORKSPACE_SETTING_SHORTCUT_RELATED":
      return WorkspaceSettingKey.WORKSPACE_SETTING_SHORTCUT_RELATED;
    case 4:
    case "WORKSPACE_SETTING_IDENTITY_PROVIDER":
      return WorkspaceSettingKey.WORKSPACE_SETTING_IDENTITY_PROVIDER;
    case 10:
    case "WORKSPACE_SETTING_LICENSE_KEY":
      return WorkspaceSettingKey.WORKSPACE_SETTING_LICENSE_KEY;
    case 11:
    case "WORKSPACE_SETTING_SECRET_SESSION":
      return WorkspaceSettingKey.WORKSPACE_SETTING_SECRET_SESSION;
    case 12:
    case "WORKSPACE_SETTING_CUSTOM_STYLE":
      return WorkspaceSettingKey.WORKSPACE_SETTING_CUSTOM_STYLE;
    case 13:
    case "WORKSPACE_SETTING_DEFAULT_VISIBILITY":
      return WorkspaceSettingKey.WORKSPACE_SETTING_DEFAULT_VISIBILITY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkspaceSettingKey.UNRECOGNIZED;
  }
}

export function workspaceSettingKeyToNumber(object: WorkspaceSettingKey): number {
  switch (object) {
    case WorkspaceSettingKey.WORKSPACE_SETTING_KEY_UNSPECIFIED:
      return 0;
    case WorkspaceSettingKey.WORKSPACE_SETTING_GENERAL:
      return 1;
    case WorkspaceSettingKey.WORKSPACE_SETTING_SECURITY:
      return 2;
    case WorkspaceSettingKey.WORKSPACE_SETTING_SHORTCUT_RELATED:
      return 3;
    case WorkspaceSettingKey.WORKSPACE_SETTING_IDENTITY_PROVIDER:
      return 4;
    case WorkspaceSettingKey.WORKSPACE_SETTING_LICENSE_KEY:
      return 10;
    case WorkspaceSettingKey.WORKSPACE_SETTING_SECRET_SESSION:
      return 11;
    case WorkspaceSettingKey.WORKSPACE_SETTING_CUSTOM_STYLE:
      return 12;
    case WorkspaceSettingKey.WORKSPACE_SETTING_DEFAULT_VISIBILITY:
      return 13;
    case WorkspaceSettingKey.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface WorkspaceSetting {
  key: WorkspaceSettingKey;
  raw: string;
  general?: WorkspaceSetting_GeneralSetting | undefined;
  security?: WorkspaceSetting_SecuritySetting | undefined;
  shortcutRelated?: WorkspaceSetting_ShortcutRelatedSetting | undefined;
  identityProvider?: WorkspaceSetting_IdentityProviderSetting | undefined;
}

export interface WorkspaceSetting_GeneralSetting {
  secretSession: string;
  licenseKey: string;
  instanceUrl: string;
  branding: Uint8Array;
  customStyle: string;
}

export interface WorkspaceSetting_SecuritySetting {
  disallowUserRegistration: boolean;
  disallowPasswordAuth: boolean;
}

export interface WorkspaceSetting_ShortcutRelatedSetting {
  defaultVisibility: Visibility;
  shortcutPrefix: string;
}

export interface WorkspaceSetting_IdentityProviderSetting {
  identityProviders: IdentityProvider[];
}

function createBaseWorkspaceSetting(): WorkspaceSetting {
  return {
    key: WorkspaceSettingKey.WORKSPACE_SETTING_KEY_UNSPECIFIED,
    raw: "",
    general: undefined,
    security: undefined,
    shortcutRelated: undefined,
    identityProvider: undefined,
  };
}

export const WorkspaceSetting: MessageFns<WorkspaceSetting> = {
  encode(message: WorkspaceSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== WorkspaceSettingKey.WORKSPACE_SETTING_KEY_UNSPECIFIED) {
      writer.uint32(8).int32(workspaceSettingKeyToNumber(message.key));
    }
    if (message.raw !== "") {
      writer.uint32(18).string(message.raw);
    }
    if (message.general !== undefined) {
      WorkspaceSetting_GeneralSetting.encode(message.general, writer.uint32(26).fork()).join();
    }
    if (message.security !== undefined) {
      WorkspaceSetting_SecuritySetting.encode(message.security, writer.uint32(34).fork()).join();
    }
    if (message.shortcutRelated !== undefined) {
      WorkspaceSetting_ShortcutRelatedSetting.encode(message.shortcutRelated, writer.uint32(42).fork()).join();
    }
    if (message.identityProvider !== undefined) {
      WorkspaceSetting_IdentityProviderSetting.encode(message.identityProvider, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = workspaceSettingKeyFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.raw = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.general = WorkspaceSetting_GeneralSetting.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.security = WorkspaceSetting_SecuritySetting.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shortcutRelated = WorkspaceSetting_ShortcutRelatedSetting.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.identityProvider = WorkspaceSetting_IdentityProviderSetting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    return WorkspaceSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting>): WorkspaceSetting {
    const message = createBaseWorkspaceSetting();
    message.key = object.key ?? WorkspaceSettingKey.WORKSPACE_SETTING_KEY_UNSPECIFIED;
    message.raw = object.raw ?? "";
    message.general = (object.general !== undefined && object.general !== null)
      ? WorkspaceSetting_GeneralSetting.fromPartial(object.general)
      : undefined;
    message.security = (object.security !== undefined && object.security !== null)
      ? WorkspaceSetting_SecuritySetting.fromPartial(object.security)
      : undefined;
    message.shortcutRelated = (object.shortcutRelated !== undefined && object.shortcutRelated !== null)
      ? WorkspaceSetting_ShortcutRelatedSetting.fromPartial(object.shortcutRelated)
      : undefined;
    message.identityProvider = (object.identityProvider !== undefined && object.identityProvider !== null)
      ? WorkspaceSetting_IdentityProviderSetting.fromPartial(object.identityProvider)
      : undefined;
    return message;
  },
};

function createBaseWorkspaceSetting_GeneralSetting(): WorkspaceSetting_GeneralSetting {
  return { secretSession: "", licenseKey: "", instanceUrl: "", branding: new Uint8Array(0), customStyle: "" };
}

export const WorkspaceSetting_GeneralSetting: MessageFns<WorkspaceSetting_GeneralSetting> = {
  encode(message: WorkspaceSetting_GeneralSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretSession !== "") {
      writer.uint32(10).string(message.secretSession);
    }
    if (message.licenseKey !== "") {
      writer.uint32(18).string(message.licenseKey);
    }
    if (message.instanceUrl !== "") {
      writer.uint32(26).string(message.instanceUrl);
    }
    if (message.branding.length !== 0) {
      writer.uint32(34).bytes(message.branding);
    }
    if (message.customStyle !== "") {
      writer.uint32(42).string(message.customStyle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting_GeneralSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting_GeneralSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secretSession = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.licenseKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.instanceUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.branding = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customStyle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting_GeneralSetting>): WorkspaceSetting_GeneralSetting {
    return WorkspaceSetting_GeneralSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting_GeneralSetting>): WorkspaceSetting_GeneralSetting {
    const message = createBaseWorkspaceSetting_GeneralSetting();
    message.secretSession = object.secretSession ?? "";
    message.licenseKey = object.licenseKey ?? "";
    message.instanceUrl = object.instanceUrl ?? "";
    message.branding = object.branding ?? new Uint8Array(0);
    message.customStyle = object.customStyle ?? "";
    return message;
  },
};

function createBaseWorkspaceSetting_SecuritySetting(): WorkspaceSetting_SecuritySetting {
  return { disallowUserRegistration: false, disallowPasswordAuth: false };
}

export const WorkspaceSetting_SecuritySetting: MessageFns<WorkspaceSetting_SecuritySetting> = {
  encode(message: WorkspaceSetting_SecuritySetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disallowUserRegistration !== false) {
      writer.uint32(8).bool(message.disallowUserRegistration);
    }
    if (message.disallowPasswordAuth !== false) {
      writer.uint32(16).bool(message.disallowPasswordAuth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting_SecuritySetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting_SecuritySetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.disallowUserRegistration = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.disallowPasswordAuth = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting_SecuritySetting>): WorkspaceSetting_SecuritySetting {
    return WorkspaceSetting_SecuritySetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting_SecuritySetting>): WorkspaceSetting_SecuritySetting {
    const message = createBaseWorkspaceSetting_SecuritySetting();
    message.disallowUserRegistration = object.disallowUserRegistration ?? false;
    message.disallowPasswordAuth = object.disallowPasswordAuth ?? false;
    return message;
  },
};

function createBaseWorkspaceSetting_ShortcutRelatedSetting(): WorkspaceSetting_ShortcutRelatedSetting {
  return { defaultVisibility: Visibility.VISIBILITY_UNSPECIFIED, shortcutPrefix: "" };
}

export const WorkspaceSetting_ShortcutRelatedSetting: MessageFns<WorkspaceSetting_ShortcutRelatedSetting> = {
  encode(message: WorkspaceSetting_ShortcutRelatedSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.defaultVisibility !== Visibility.VISIBILITY_UNSPECIFIED) {
      writer.uint32(8).int32(visibilityToNumber(message.defaultVisibility));
    }
    if (message.shortcutPrefix !== "") {
      writer.uint32(18).string(message.shortcutPrefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting_ShortcutRelatedSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting_ShortcutRelatedSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.defaultVisibility = visibilityFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shortcutPrefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting_ShortcutRelatedSetting>): WorkspaceSetting_ShortcutRelatedSetting {
    return WorkspaceSetting_ShortcutRelatedSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting_ShortcutRelatedSetting>): WorkspaceSetting_ShortcutRelatedSetting {
    const message = createBaseWorkspaceSetting_ShortcutRelatedSetting();
    message.defaultVisibility = object.defaultVisibility ?? Visibility.VISIBILITY_UNSPECIFIED;
    message.shortcutPrefix = object.shortcutPrefix ?? "";
    return message;
  },
};

function createBaseWorkspaceSetting_IdentityProviderSetting(): WorkspaceSetting_IdentityProviderSetting {
  return { identityProviders: [] };
}

export const WorkspaceSetting_IdentityProviderSetting: MessageFns<WorkspaceSetting_IdentityProviderSetting> = {
  encode(message: WorkspaceSetting_IdentityProviderSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.identityProviders) {
      IdentityProvider.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkspaceSetting_IdentityProviderSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkspaceSetting_IdentityProviderSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviders.push(IdentityProvider.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<WorkspaceSetting_IdentityProviderSetting>): WorkspaceSetting_IdentityProviderSetting {
    return WorkspaceSetting_IdentityProviderSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkspaceSetting_IdentityProviderSetting>): WorkspaceSetting_IdentityProviderSetting {
    const message = createBaseWorkspaceSetting_IdentityProviderSetting();
    message.identityProviders = object.identityProviders?.map((e) => IdentityProvider.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
