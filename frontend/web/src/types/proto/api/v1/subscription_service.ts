// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/subscription_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "monotreme.api.v1";

export enum PlanType {
  PLAN_TYPE_UNSPECIFIED = "PLAN_TYPE_UNSPECIFIED",
  FREE = "FREE",
  PRO = "PRO",
  ENTERPRISE = "ENTERPRISE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function planTypeFromJSON(object: any): PlanType {
  switch (object) {
    case 0:
    case "PLAN_TYPE_UNSPECIFIED":
      return PlanType.PLAN_TYPE_UNSPECIFIED;
    case 1:
    case "FREE":
      return PlanType.FREE;
    case 2:
    case "PRO":
      return PlanType.PRO;
    case 3:
    case "ENTERPRISE":
      return PlanType.ENTERPRISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanType.UNRECOGNIZED;
  }
}

export function planTypeToNumber(object: PlanType): number {
  switch (object) {
    case PlanType.PLAN_TYPE_UNSPECIFIED:
      return 0;
    case PlanType.FREE:
      return 1;
    case PlanType.PRO:
      return 2;
    case PlanType.ENTERPRISE:
      return 3;
    case PlanType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface Subscription {
  plan: PlanType;
  startedTime?: Date | undefined;
  expiresTime?: Date | undefined;
  features: string[];
  seats: number;
  shortcutsLimit: number;
  collectionsLimit: number;
}

export interface GetSubscriptionRequest {
}

export interface UpdateSubscriptionRequest {
  licenseKey: string;
}

export interface DeleteSubscriptionRequest {
}

function createBaseSubscription(): Subscription {
  return {
    plan: PlanType.PLAN_TYPE_UNSPECIFIED,
    startedTime: undefined,
    expiresTime: undefined,
    features: [],
    seats: 0,
    shortcutsLimit: 0,
    collectionsLimit: 0,
  };
}

export const Subscription: MessageFns<Subscription> = {
  encode(message: Subscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.plan !== PlanType.PLAN_TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(planTypeToNumber(message.plan));
    }
    if (message.startedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startedTime), writer.uint32(18).fork()).join();
    }
    if (message.expiresTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresTime), writer.uint32(26).fork()).join();
    }
    for (const v of message.features) {
      writer.uint32(34).string(v!);
    }
    if (message.seats !== 0) {
      writer.uint32(40).int32(message.seats);
    }
    if (message.shortcutsLimit !== 0) {
      writer.uint32(48).int32(message.shortcutsLimit);
    }
    if (message.collectionsLimit !== 0) {
      writer.uint32(56).int32(message.collectionsLimit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.plan = planTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiresTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.features.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.seats = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.shortcutsLimit = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.collectionsLimit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Subscription>): Subscription {
    return Subscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Subscription>): Subscription {
    const message = createBaseSubscription();
    message.plan = object.plan ?? PlanType.PLAN_TYPE_UNSPECIFIED;
    message.startedTime = object.startedTime ?? undefined;
    message.expiresTime = object.expiresTime ?? undefined;
    message.features = object.features?.map((e) => e) || [];
    message.seats = object.seats ?? 0;
    message.shortcutsLimit = object.shortcutsLimit ?? 0;
    message.collectionsLimit = object.collectionsLimit ?? 0;
    return message;
  },
};

function createBaseGetSubscriptionRequest(): GetSubscriptionRequest {
  return {};
}

export const GetSubscriptionRequest: MessageFns<GetSubscriptionRequest> = {
  encode(_: GetSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    return GetSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    const message = createBaseGetSubscriptionRequest();
    return message;
  },
};

function createBaseUpdateSubscriptionRequest(): UpdateSubscriptionRequest {
  return { licenseKey: "" };
}

export const UpdateSubscriptionRequest: MessageFns<UpdateSubscriptionRequest> = {
  encode(message: UpdateSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.licenseKey !== "") {
      writer.uint32(10).string(message.licenseKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.licenseKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    return UpdateSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    const message = createBaseUpdateSubscriptionRequest();
    message.licenseKey = object.licenseKey ?? "";
    return message;
  },
};

function createBaseDeleteSubscriptionRequest(): DeleteSubscriptionRequest {
  return {};
}

export const DeleteSubscriptionRequest: MessageFns<DeleteSubscriptionRequest> = {
  encode(_: DeleteSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest {
    return DeleteSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest {
    const message = createBaseDeleteSubscriptionRequest();
    return message;
  },
};

export type SubscriptionServiceDefinition = typeof SubscriptionServiceDefinition;
export const SubscriptionServiceDefinition = {
  name: "SubscriptionService",
  fullName: "monotreme.api.v1.SubscriptionService",
  methods: {
    /** GetSubscription gets the current subscription of Monotreme instance. */
    getSubscription: {
      name: "GetSubscription",
      requestType: GetSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([18, 18, 16, 47, 118, 49, 47, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110]),
          ],
        },
      },
    },
    /** UpdateSubscription updates the subscription. */
    updateSubscription: {
      name: "UpdateSubscription",
      requestType: UpdateSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              50,
              16,
              47,
              118,
              49,
              47,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    /** DeleteSubscription deletes the subscription. */
    deleteSubscription: {
      name: "DeleteSubscription",
      requestType: DeleteSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([18, 42, 16, 47, 118, 49, 47, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
