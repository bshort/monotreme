// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/stats_measurement.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "monotreme.store";

/** StatsMeasurement represents a single measurement of workspace statistics at a specific time */
export interface StatsMeasurement {
  /** Unique identifier for the measurement */
  id: number;
  /** Unix timestamp when the measurement was taken */
  measuredTs: number;
  /** Total number of shortcuts at measurement time */
  shortcutsCount: number;
  /** Total number of users at measurement time */
  usersCount: number;
  /** Total number of collections at measurement time */
  collectionsCount: number;
  /** Total number of hits (shortcut views) at measurement time */
  hitsCount: number;
}

function createBaseStatsMeasurement(): StatsMeasurement {
  return { id: 0, measuredTs: 0, shortcutsCount: 0, usersCount: 0, collectionsCount: 0, hitsCount: 0 };
}

export const StatsMeasurement: MessageFns<StatsMeasurement> = {
  encode(message: StatsMeasurement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.measuredTs !== 0) {
      writer.uint32(16).int64(message.measuredTs);
    }
    if (message.shortcutsCount !== 0) {
      writer.uint32(24).int32(message.shortcutsCount);
    }
    if (message.usersCount !== 0) {
      writer.uint32(32).int32(message.usersCount);
    }
    if (message.collectionsCount !== 0) {
      writer.uint32(40).int32(message.collectionsCount);
    }
    if (message.hitsCount !== 0) {
      writer.uint32(48).int32(message.hitsCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatsMeasurement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatsMeasurement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.measuredTs = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.shortcutsCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.usersCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.collectionsCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.hitsCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StatsMeasurement>): StatsMeasurement {
    return StatsMeasurement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StatsMeasurement>): StatsMeasurement {
    const message = createBaseStatsMeasurement();
    message.id = object.id ?? 0;
    message.measuredTs = object.measuredTs ?? 0;
    message.shortcutsCount = object.shortcutsCount ?? 0;
    message.usersCount = object.usersCount ?? 0;
    message.collectionsCount = object.collectionsCount ?? 0;
    message.hitsCount = object.hitsCount ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
