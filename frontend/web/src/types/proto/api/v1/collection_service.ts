// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/collection_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Visibility, visibilityFromJSON, visibilityToNumber } from "./common";

export const protobufPackage = "monotreme.api.v1";

export interface Collection {
  id: number;
  creatorId: number;
  createdTime?: Date | undefined;
  updatedTime?: Date | undefined;
  name: string;
  title: string;
  description: string;
  shortcutIds: number[];
  visibility: Visibility;
}

export interface ListCollectionsRequest {
}

export interface ListCollectionsResponse {
  collections: Collection[];
}

export interface GetCollectionRequest {
  id: number;
}

export interface GetCollectionByNameRequest {
  name: string;
}

export interface CreateCollectionRequest {
  collection?: Collection | undefined;
}

export interface UpdateCollectionRequest {
  collection?: Collection | undefined;
  updateMask?: string[] | undefined;
}

export interface DeleteCollectionRequest {
  id: number;
}

export interface ImportBookmarksRequest {
  htmlContent: string;
}

export interface ImportBookmarksResponse {
  collections: Collection[];
  totalShortcuts: number;
  totalCollections: number;
  shortcutsCreated: number;
  shortcutsUpdated: number;
  collectionsCreated: number;
  collectionsUpdated: number;
}

function createBaseCollection(): Collection {
  return {
    id: 0,
    creatorId: 0,
    createdTime: undefined,
    updatedTime: undefined,
    name: "",
    title: "",
    description: "",
    shortcutIds: [],
    visibility: Visibility.VISIBILITY_UNSPECIFIED,
  };
}

export const Collection: MessageFns<Collection> = {
  encode(message: Collection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.creatorId !== 0) {
      writer.uint32(16).int32(message.creatorId);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(26).fork()).join();
    }
    if (message.updatedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedTime), writer.uint32(34).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(58).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(66).string(message.description);
    }
    writer.uint32(74).fork();
    for (const v of message.shortcutIds) {
      writer.int32(v);
    }
    writer.join();
    if (message.visibility !== Visibility.VISIBILITY_UNSPECIFIED) {
      writer.uint32(80).int32(visibilityToNumber(message.visibility));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Collection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.shortcutIds.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.shortcutIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.visibility = visibilityFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Collection>): Collection {
    return Collection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Collection>): Collection {
    const message = createBaseCollection();
    message.id = object.id ?? 0;
    message.creatorId = object.creatorId ?? 0;
    message.createdTime = object.createdTime ?? undefined;
    message.updatedTime = object.updatedTime ?? undefined;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.shortcutIds = object.shortcutIds?.map((e) => e) || [];
    message.visibility = object.visibility ?? Visibility.VISIBILITY_UNSPECIFIED;
    return message;
  },
};

function createBaseListCollectionsRequest(): ListCollectionsRequest {
  return {};
}

export const ListCollectionsRequest: MessageFns<ListCollectionsRequest> = {
  encode(_: ListCollectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCollectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCollectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListCollectionsRequest>): ListCollectionsRequest {
    return ListCollectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListCollectionsRequest>): ListCollectionsRequest {
    const message = createBaseListCollectionsRequest();
    return message;
  },
};

function createBaseListCollectionsResponse(): ListCollectionsResponse {
  return { collections: [] };
}

export const ListCollectionsResponse: MessageFns<ListCollectionsResponse> = {
  encode(message: ListCollectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collections) {
      Collection.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCollectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCollectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collections.push(Collection.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListCollectionsResponse>): ListCollectionsResponse {
    return ListCollectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListCollectionsResponse>): ListCollectionsResponse {
    const message = createBaseListCollectionsResponse();
    message.collections = object.collections?.map((e) => Collection.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetCollectionRequest(): GetCollectionRequest {
  return { id: 0 };
}

export const GetCollectionRequest: MessageFns<GetCollectionRequest> = {
  encode(message: GetCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCollectionRequest>): GetCollectionRequest {
    return GetCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCollectionRequest>): GetCollectionRequest {
    const message = createBaseGetCollectionRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetCollectionByNameRequest(): GetCollectionByNameRequest {
  return { name: "" };
}

export const GetCollectionByNameRequest: MessageFns<GetCollectionByNameRequest> = {
  encode(message: GetCollectionByNameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCollectionByNameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCollectionByNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCollectionByNameRequest>): GetCollectionByNameRequest {
    return GetCollectionByNameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCollectionByNameRequest>): GetCollectionByNameRequest {
    const message = createBaseGetCollectionByNameRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateCollectionRequest(): CreateCollectionRequest {
  return { collection: undefined };
}

export const CreateCollectionRequest: MessageFns<CreateCollectionRequest> = {
  encode(message: CreateCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collection !== undefined) {
      Collection.encode(message.collection, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collection = Collection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateCollectionRequest>): CreateCollectionRequest {
    return CreateCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCollectionRequest>): CreateCollectionRequest {
    const message = createBaseCreateCollectionRequest();
    message.collection = (object.collection !== undefined && object.collection !== null)
      ? Collection.fromPartial(object.collection)
      : undefined;
    return message;
  },
};

function createBaseUpdateCollectionRequest(): UpdateCollectionRequest {
  return { collection: undefined, updateMask: undefined };
}

export const UpdateCollectionRequest: MessageFns<UpdateCollectionRequest> = {
  encode(message: UpdateCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collection !== undefined) {
      Collection.encode(message.collection, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collection = Collection.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCollectionRequest>): UpdateCollectionRequest {
    return UpdateCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCollectionRequest>): UpdateCollectionRequest {
    const message = createBaseUpdateCollectionRequest();
    message.collection = (object.collection !== undefined && object.collection !== null)
      ? Collection.fromPartial(object.collection)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteCollectionRequest(): DeleteCollectionRequest {
  return { id: 0 };
}

export const DeleteCollectionRequest: MessageFns<DeleteCollectionRequest> = {
  encode(message: DeleteCollectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCollectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCollectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteCollectionRequest>): DeleteCollectionRequest {
    return DeleteCollectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCollectionRequest>): DeleteCollectionRequest {
    const message = createBaseDeleteCollectionRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseImportBookmarksRequest(): ImportBookmarksRequest {
  return { htmlContent: "" };
}

export const ImportBookmarksRequest: MessageFns<ImportBookmarksRequest> = {
  encode(message: ImportBookmarksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.htmlContent !== "") {
      writer.uint32(10).string(message.htmlContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportBookmarksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportBookmarksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.htmlContent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportBookmarksRequest>): ImportBookmarksRequest {
    return ImportBookmarksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportBookmarksRequest>): ImportBookmarksRequest {
    const message = createBaseImportBookmarksRequest();
    message.htmlContent = object.htmlContent ?? "";
    return message;
  },
};

function createBaseImportBookmarksResponse(): ImportBookmarksResponse {
  return {
    collections: [],
    totalShortcuts: 0,
    totalCollections: 0,
    shortcutsCreated: 0,
    shortcutsUpdated: 0,
    collectionsCreated: 0,
    collectionsUpdated: 0,
  };
}

export const ImportBookmarksResponse: MessageFns<ImportBookmarksResponse> = {
  encode(message: ImportBookmarksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collections) {
      Collection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalShortcuts !== 0) {
      writer.uint32(16).int32(message.totalShortcuts);
    }
    if (message.totalCollections !== 0) {
      writer.uint32(24).int32(message.totalCollections);
    }
    if (message.shortcutsCreated !== 0) {
      writer.uint32(32).int32(message.shortcutsCreated);
    }
    if (message.shortcutsUpdated !== 0) {
      writer.uint32(40).int32(message.shortcutsUpdated);
    }
    if (message.collectionsCreated !== 0) {
      writer.uint32(48).int32(message.collectionsCreated);
    }
    if (message.collectionsUpdated !== 0) {
      writer.uint32(56).int32(message.collectionsUpdated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImportBookmarksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportBookmarksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collections.push(Collection.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalShortcuts = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCollections = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.shortcutsCreated = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.shortcutsUpdated = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.collectionsCreated = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.collectionsUpdated = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportBookmarksResponse>): ImportBookmarksResponse {
    return ImportBookmarksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportBookmarksResponse>): ImportBookmarksResponse {
    const message = createBaseImportBookmarksResponse();
    message.collections = object.collections?.map((e) => Collection.fromPartial(e)) || [];
    message.totalShortcuts = object.totalShortcuts ?? 0;
    message.totalCollections = object.totalCollections ?? 0;
    message.shortcutsCreated = object.shortcutsCreated ?? 0;
    message.shortcutsUpdated = object.shortcutsUpdated ?? 0;
    message.collectionsCreated = object.collectionsCreated ?? 0;
    message.collectionsUpdated = object.collectionsUpdated ?? 0;
    return message;
  },
};

export type CollectionServiceDefinition = typeof CollectionServiceDefinition;
export const CollectionServiceDefinition = {
  name: "CollectionService",
  fullName: "monotreme.api.v1.CollectionService",
  methods: {
    /** ListCollections returns a list of collections. */
    listCollections: {
      name: "ListCollections",
      requestType: ListCollectionsRequest,
      requestStream: false,
      responseType: ListCollectionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              21,
              18,
              19,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** GetCollection returns a collection by id. */
    getCollection: {
      name: "GetCollection",
      requestType: GetCollectionRequest,
      requestStream: false,
      responseType: Collection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([2, 105, 100])],
          578365826: [
            new Uint8Array([
              26,
              18,
              24,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** GetCollectionByName returns a collection by name. */
    getCollectionByName: {
      name: "GetCollectionByName",
      requestType: GetCollectionByNameRequest,
      requestStream: false,
      responseType: Collection,
      responseStream: false,
      options: {},
    },
    /** CreateCollection creates a collection. */
    createCollection: {
      name: "CreateCollection",
      requestType: CreateCollectionRequest,
      requestStream: false,
      responseType: Collection,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              33,
              58,
              10,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              34,
              19,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** UpdateCollection updates a collection. */
    updateCollection: {
      name: "UpdateCollection",
      requestType: UpdateCollectionRequest,
      requestStream: false,
      responseType: Collection,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              22,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            new Uint8Array([
              49,
              58,
              10,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              26,
              35,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              46,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** DeleteCollection deletes a collection by id. */
    deleteCollection: {
      name: "DeleteCollection",
      requestType: DeleteCollectionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([2, 105, 100])],
          578365826: [
            new Uint8Array([
              26,
              42,
              24,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** ImportBookmarks imports bookmarks from an HTML file and creates collections and shortcuts. */
    importBookmarks: {
      name: "ImportBookmarks",
      requestType: ImportBookmarksRequest,
      requestStream: false,
      responseType: ImportBookmarksResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              108,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
