// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/user_setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "monotreme.store";

export enum UserSettingKey {
  USER_SETTING_KEY_UNSPECIFIED = "USER_SETTING_KEY_UNSPECIFIED",
  /** USER_SETTING_GENERAL - User general settings. */
  USER_SETTING_GENERAL = "USER_SETTING_GENERAL",
  /** USER_SETTING_ACCESS_TOKENS - User access tokens. */
  USER_SETTING_ACCESS_TOKENS = "USER_SETTING_ACCESS_TOKENS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function userSettingKeyFromJSON(object: any): UserSettingKey {
  switch (object) {
    case 0:
    case "USER_SETTING_KEY_UNSPECIFIED":
      return UserSettingKey.USER_SETTING_KEY_UNSPECIFIED;
    case 1:
    case "USER_SETTING_GENERAL":
      return UserSettingKey.USER_SETTING_GENERAL;
    case 2:
    case "USER_SETTING_ACCESS_TOKENS":
      return UserSettingKey.USER_SETTING_ACCESS_TOKENS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserSettingKey.UNRECOGNIZED;
  }
}

export function userSettingKeyToNumber(object: UserSettingKey): number {
  switch (object) {
    case UserSettingKey.USER_SETTING_KEY_UNSPECIFIED:
      return 0;
    case UserSettingKey.USER_SETTING_GENERAL:
      return 1;
    case UserSettingKey.USER_SETTING_ACCESS_TOKENS:
      return 2;
    case UserSettingKey.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface UserSetting {
  userId: number;
  key: UserSettingKey;
  general?: UserSetting_GeneralSetting | undefined;
  accessTokens?: UserSetting_AccessTokensSetting | undefined;
}

export interface UserSetting_GeneralSetting {
  locale: string;
  colorTheme: string;
}

export interface UserSetting_AccessTokensSetting {
  /** Nested repeated field */
  accessTokens: UserSetting_AccessTokensSetting_AccessToken[];
}

export interface UserSetting_AccessTokensSetting_AccessToken {
  /** The access token is a JWT token, including expiration time, issuer, etc. */
  accessToken: string;
  /** A description for the access token. */
  description: string;
}

function createBaseUserSetting(): UserSetting {
  return { userId: 0, key: UserSettingKey.USER_SETTING_KEY_UNSPECIFIED, general: undefined, accessTokens: undefined };
}

export const UserSetting: MessageFns<UserSetting> = {
  encode(message: UserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.key !== UserSettingKey.USER_SETTING_KEY_UNSPECIFIED) {
      writer.uint32(16).int32(userSettingKeyToNumber(message.key));
    }
    if (message.general !== undefined) {
      UserSetting_GeneralSetting.encode(message.general, writer.uint32(26).fork()).join();
    }
    if (message.accessTokens !== undefined) {
      UserSetting_AccessTokensSetting.encode(message.accessTokens, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.key = userSettingKeyFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.general = UserSetting_GeneralSetting.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessTokens = UserSetting_AccessTokensSetting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting>): UserSetting {
    return UserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSetting>): UserSetting {
    const message = createBaseUserSetting();
    message.userId = object.userId ?? 0;
    message.key = object.key ?? UserSettingKey.USER_SETTING_KEY_UNSPECIFIED;
    message.general = (object.general !== undefined && object.general !== null)
      ? UserSetting_GeneralSetting.fromPartial(object.general)
      : undefined;
    message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
      ? UserSetting_AccessTokensSetting.fromPartial(object.accessTokens)
      : undefined;
    return message;
  },
};

function createBaseUserSetting_GeneralSetting(): UserSetting_GeneralSetting {
  return { locale: "", colorTheme: "" };
}

export const UserSetting_GeneralSetting: MessageFns<UserSetting_GeneralSetting> = {
  encode(message: UserSetting_GeneralSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locale !== "") {
      writer.uint32(10).string(message.locale);
    }
    if (message.colorTheme !== "") {
      writer.uint32(18).string(message.colorTheme);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting_GeneralSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting_GeneralSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.colorTheme = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting_GeneralSetting>): UserSetting_GeneralSetting {
    return UserSetting_GeneralSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSetting_GeneralSetting>): UserSetting_GeneralSetting {
    const message = createBaseUserSetting_GeneralSetting();
    message.locale = object.locale ?? "";
    message.colorTheme = object.colorTheme ?? "";
    return message;
  },
};

function createBaseUserSetting_AccessTokensSetting(): UserSetting_AccessTokensSetting {
  return { accessTokens: [] };
}

export const UserSetting_AccessTokensSetting: MessageFns<UserSetting_AccessTokensSetting> = {
  encode(message: UserSetting_AccessTokensSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessTokens) {
      UserSetting_AccessTokensSetting_AccessToken.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting_AccessTokensSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting_AccessTokensSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessTokens.push(UserSetting_AccessTokensSetting_AccessToken.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting_AccessTokensSetting>): UserSetting_AccessTokensSetting {
    return UserSetting_AccessTokensSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSetting_AccessTokensSetting>): UserSetting_AccessTokensSetting {
    const message = createBaseUserSetting_AccessTokensSetting();
    message.accessTokens =
      object.accessTokens?.map((e) => UserSetting_AccessTokensSetting_AccessToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserSetting_AccessTokensSetting_AccessToken(): UserSetting_AccessTokensSetting_AccessToken {
  return { accessToken: "", description: "" };
}

export const UserSetting_AccessTokensSetting_AccessToken: MessageFns<UserSetting_AccessTokensSetting_AccessToken> = {
  encode(
    message: UserSetting_AccessTokensSetting_AccessToken,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting_AccessTokensSetting_AccessToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting_AccessTokensSetting_AccessToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting_AccessTokensSetting_AccessToken>): UserSetting_AccessTokensSetting_AccessToken {
    return UserSetting_AccessTokensSetting_AccessToken.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UserSetting_AccessTokensSetting_AccessToken>,
  ): UserSetting_AccessTokensSetting_AccessToken {
    const message = createBaseUserSetting_AccessTokensSetting_AccessToken();
    message.accessToken = object.accessToken ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
