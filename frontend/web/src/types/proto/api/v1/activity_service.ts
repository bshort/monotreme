// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/activity_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Role, roleFromJSON, roleToNumber } from "./user_service";

export const protobufPackage = "monotreme.api.v1";

/** Activity Types */
export enum ActivityType {
  ACTIVITY_TYPE_UNSPECIFIED = "ACTIVITY_TYPE_UNSPECIFIED",
  USER_CREATED = "USER_CREATED",
  SHORTCUT_CREATED = "SHORTCUT_CREATED",
  SHORTCUT_VIEWED = "SHORTCUT_VIEWED",
  COLLECTION_CREATED = "COLLECTION_CREATED",
  COLLECTION_VIEWED = "COLLECTION_VIEWED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function activityTypeFromJSON(object: any): ActivityType {
  switch (object) {
    case 0:
    case "ACTIVITY_TYPE_UNSPECIFIED":
      return ActivityType.ACTIVITY_TYPE_UNSPECIFIED;
    case 1:
    case "USER_CREATED":
      return ActivityType.USER_CREATED;
    case 2:
    case "SHORTCUT_CREATED":
      return ActivityType.SHORTCUT_CREATED;
    case 3:
    case "SHORTCUT_VIEWED":
      return ActivityType.SHORTCUT_VIEWED;
    case 4:
    case "COLLECTION_CREATED":
      return ActivityType.COLLECTION_CREATED;
    case 5:
    case "COLLECTION_VIEWED":
      return ActivityType.COLLECTION_VIEWED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActivityType.UNRECOGNIZED;
  }
}

export function activityTypeToNumber(object: ActivityType): number {
  switch (object) {
    case ActivityType.ACTIVITY_TYPE_UNSPECIFIED:
      return 0;
    case ActivityType.USER_CREATED:
      return 1;
    case ActivityType.SHORTCUT_CREATED:
      return 2;
    case ActivityType.SHORTCUT_VIEWED:
      return 3;
    case ActivityType.COLLECTION_CREATED:
      return 4;
    case ActivityType.COLLECTION_VIEWED:
      return 5;
    case ActivityType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface GetRecentActivityRequest {
  /** Number of items to return for each activity type (default: 5) */
  limit?: number | undefined;
}

export interface GetRecentActivityResponse {
  recentUsers: RecentUser[];
  recentShortcuts: RecentShortcut[];
  recentCollections: RecentCollection[];
  recentClicks: RecentClick[];
  mostClickedShortcuts: MostClickedShortcut[];
}

export interface GetActivitySummaryRequest {
}

export interface GetActivitySummaryResponse {
  /** Total counts */
  totalUsers: number;
  totalShortcuts: number;
  totalCollections: number;
  totalClicks: number;
  /** Recent activity counts (last 24 hours) */
  recentUsersCount: number;
  recentShortcutsCount: number;
  recentCollectionsCount: number;
  recentClicksCount: number;
  /** User-specific summary (for current user) */
  userSummary?: UserSummary | undefined;
}

export interface ListActivitiesRequest {
  /** Activity type filter */
  activityType?:
    | ActivityType
    | undefined;
  /** User ID filter (if not specified, returns activities for all users) */
  userId?:
    | number
    | undefined;
  /** Time range filter */
  createdAfter?: Date | undefined;
  createdBefore?:
    | Date
    | undefined;
  /** Pagination */
  pageSize: number;
  pageToken: string;
}

export interface ListActivitiesResponse {
  activities: ActivityItem[];
  nextPageToken: string;
  totalCount: number;
}

/** Recent Activity Items */
export interface RecentUser {
  id: number;
  email: string;
  nickname: string;
  createdTime?: Date | undefined;
  role: Role;
}

export interface RecentShortcut {
  id: number;
  name: string;
  title: string;
  link: string;
  creatorId: number;
  creatorName: string;
  createdTime?: Date | undefined;
  viewCount: number;
  tags: string[];
}

export interface RecentCollection {
  id: number;
  name: string;
  title: string;
  description: string;
  creatorId: number;
  creatorName: string;
  createdTime?: Date | undefined;
  shortcutCount: number;
}

export interface RecentClick {
  shortcutId: number;
  shortcutName: string;
  shortcutTitle: string;
  shortcutLink: string;
  creatorId: number;
  creatorName: string;
  clickedTime?: Date | undefined;
  userAgent: string;
  referer: string;
}

export interface MostClickedShortcut {
  id: number;
  name: string;
  title: string;
  link: string;
  creatorId: number;
  creatorName: string;
  viewCount: number;
  lastClicked?: Date | undefined;
}

export interface ActivityItem {
  id: number;
  type: ActivityType;
  userId: number;
  userName: string;
  createdTime?: Date | undefined;
  userCreated?: UserCreatedData | undefined;
  shortcutCreated?: ShortcutCreatedData | undefined;
  shortcutViewed?: ShortcutViewedData | undefined;
  collectionCreated?: CollectionCreatedData | undefined;
  collectionViewed?: CollectionViewedData | undefined;
}

export interface UserCreatedData {
  userId: number;
  email: string;
  nickname: string;
  role: Role;
}

export interface ShortcutCreatedData {
  shortcutId: number;
  name: string;
  title: string;
  link: string;
}

export interface ShortcutViewedData {
  shortcutId: number;
  name: string;
  title: string;
  userAgent: string;
  referer: string;
}

export interface CollectionCreatedData {
  collectionId: number;
  name: string;
  title: string;
  description: string;
}

export interface CollectionViewedData {
  collectionId: number;
  name: string;
  title: string;
}

export interface UserSummary {
  userShortcutsCount: number;
  userCollectionsCount: number;
  userTotalClicks: number;
  userTags: string[];
}

function createBaseGetRecentActivityRequest(): GetRecentActivityRequest {
  return { limit: undefined };
}

export const GetRecentActivityRequest: MessageFns<GetRecentActivityRequest> = {
  encode(message: GetRecentActivityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== undefined) {
      writer.uint32(8).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecentActivityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecentActivityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetRecentActivityRequest>): GetRecentActivityRequest {
    return GetRecentActivityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecentActivityRequest>): GetRecentActivityRequest {
    const message = createBaseGetRecentActivityRequest();
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseGetRecentActivityResponse(): GetRecentActivityResponse {
  return { recentUsers: [], recentShortcuts: [], recentCollections: [], recentClicks: [], mostClickedShortcuts: [] };
}

export const GetRecentActivityResponse: MessageFns<GetRecentActivityResponse> = {
  encode(message: GetRecentActivityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recentUsers) {
      RecentUser.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.recentShortcuts) {
      RecentShortcut.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.recentCollections) {
      RecentCollection.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.recentClicks) {
      RecentClick.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.mostClickedShortcuts) {
      MostClickedShortcut.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRecentActivityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecentActivityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recentUsers.push(RecentUser.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recentShortcuts.push(RecentShortcut.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recentCollections.push(RecentCollection.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recentClicks.push(RecentClick.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mostClickedShortcuts.push(MostClickedShortcut.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetRecentActivityResponse>): GetRecentActivityResponse {
    return GetRecentActivityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecentActivityResponse>): GetRecentActivityResponse {
    const message = createBaseGetRecentActivityResponse();
    message.recentUsers = object.recentUsers?.map((e) => RecentUser.fromPartial(e)) || [];
    message.recentShortcuts = object.recentShortcuts?.map((e) => RecentShortcut.fromPartial(e)) || [];
    message.recentCollections = object.recentCollections?.map((e) => RecentCollection.fromPartial(e)) || [];
    message.recentClicks = object.recentClicks?.map((e) => RecentClick.fromPartial(e)) || [];
    message.mostClickedShortcuts = object.mostClickedShortcuts?.map((e) => MostClickedShortcut.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetActivitySummaryRequest(): GetActivitySummaryRequest {
  return {};
}

export const GetActivitySummaryRequest: MessageFns<GetActivitySummaryRequest> = {
  encode(_: GetActivitySummaryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActivitySummaryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActivitySummaryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetActivitySummaryRequest>): GetActivitySummaryRequest {
    return GetActivitySummaryRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetActivitySummaryRequest>): GetActivitySummaryRequest {
    const message = createBaseGetActivitySummaryRequest();
    return message;
  },
};

function createBaseGetActivitySummaryResponse(): GetActivitySummaryResponse {
  return {
    totalUsers: 0,
    totalShortcuts: 0,
    totalCollections: 0,
    totalClicks: 0,
    recentUsersCount: 0,
    recentShortcutsCount: 0,
    recentCollectionsCount: 0,
    recentClicksCount: 0,
    userSummary: undefined,
  };
}

export const GetActivitySummaryResponse: MessageFns<GetActivitySummaryResponse> = {
  encode(message: GetActivitySummaryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalUsers !== 0) {
      writer.uint32(8).int32(message.totalUsers);
    }
    if (message.totalShortcuts !== 0) {
      writer.uint32(16).int32(message.totalShortcuts);
    }
    if (message.totalCollections !== 0) {
      writer.uint32(24).int32(message.totalCollections);
    }
    if (message.totalClicks !== 0) {
      writer.uint32(32).int32(message.totalClicks);
    }
    if (message.recentUsersCount !== 0) {
      writer.uint32(40).int32(message.recentUsersCount);
    }
    if (message.recentShortcutsCount !== 0) {
      writer.uint32(48).int32(message.recentShortcutsCount);
    }
    if (message.recentCollectionsCount !== 0) {
      writer.uint32(56).int32(message.recentCollectionsCount);
    }
    if (message.recentClicksCount !== 0) {
      writer.uint32(64).int32(message.recentClicksCount);
    }
    if (message.userSummary !== undefined) {
      UserSummary.encode(message.userSummary, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActivitySummaryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActivitySummaryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalUsers = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalShortcuts = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCollections = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalClicks = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.recentUsersCount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.recentShortcutsCount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.recentCollectionsCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.recentClicksCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userSummary = UserSummary.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetActivitySummaryResponse>): GetActivitySummaryResponse {
    return GetActivitySummaryResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetActivitySummaryResponse>): GetActivitySummaryResponse {
    const message = createBaseGetActivitySummaryResponse();
    message.totalUsers = object.totalUsers ?? 0;
    message.totalShortcuts = object.totalShortcuts ?? 0;
    message.totalCollections = object.totalCollections ?? 0;
    message.totalClicks = object.totalClicks ?? 0;
    message.recentUsersCount = object.recentUsersCount ?? 0;
    message.recentShortcutsCount = object.recentShortcutsCount ?? 0;
    message.recentCollectionsCount = object.recentCollectionsCount ?? 0;
    message.recentClicksCount = object.recentClicksCount ?? 0;
    message.userSummary = (object.userSummary !== undefined && object.userSummary !== null)
      ? UserSummary.fromPartial(object.userSummary)
      : undefined;
    return message;
  },
};

function createBaseListActivitiesRequest(): ListActivitiesRequest {
  return {
    activityType: undefined,
    userId: undefined,
    createdAfter: undefined,
    createdBefore: undefined,
    pageSize: 0,
    pageToken: "",
  };
}

export const ListActivitiesRequest: MessageFns<ListActivitiesRequest> = {
  encode(message: ListActivitiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activityType !== undefined) {
      writer.uint32(8).int32(activityTypeToNumber(message.activityType));
    }
    if (message.userId !== undefined) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.createdAfter !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAfter), writer.uint32(26).fork()).join();
    }
    if (message.createdBefore !== undefined) {
      Timestamp.encode(toTimestamp(message.createdBefore), writer.uint32(34).fork()).join();
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(50).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActivitiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActivitiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.activityType = activityTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAfter = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdBefore = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListActivitiesRequest>): ListActivitiesRequest {
    return ListActivitiesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActivitiesRequest>): ListActivitiesRequest {
    const message = createBaseListActivitiesRequest();
    message.activityType = object.activityType ?? undefined;
    message.userId = object.userId ?? undefined;
    message.createdAfter = object.createdAfter ?? undefined;
    message.createdBefore = object.createdBefore ?? undefined;
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListActivitiesResponse(): ListActivitiesResponse {
  return { activities: [], nextPageToken: "", totalCount: 0 };
}

export const ListActivitiesResponse: MessageFns<ListActivitiesResponse> = {
  encode(message: ListActivitiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.activities) {
      ActivityItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalCount !== 0) {
      writer.uint32(24).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActivitiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActivitiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.activities.push(ActivityItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListActivitiesResponse>): ListActivitiesResponse {
    return ListActivitiesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActivitiesResponse>): ListActivitiesResponse {
    const message = createBaseListActivitiesResponse();
    message.activities = object.activities?.map((e) => ActivityItem.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseRecentUser(): RecentUser {
  return { id: 0, email: "", nickname: "", createdTime: undefined, role: Role.ROLE_UNSPECIFIED };
}

export const RecentUser: MessageFns<RecentUser> = {
  encode(message: RecentUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(34).fork()).join();
    }
    if (message.role !== Role.ROLE_UNSPECIFIED) {
      writer.uint32(40).int32(roleToNumber(message.role));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.role = roleFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RecentUser>): RecentUser {
    return RecentUser.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecentUser>): RecentUser {
    const message = createBaseRecentUser();
    message.id = object.id ?? 0;
    message.email = object.email ?? "";
    message.nickname = object.nickname ?? "";
    message.createdTime = object.createdTime ?? undefined;
    message.role = object.role ?? Role.ROLE_UNSPECIFIED;
    return message;
  },
};

function createBaseRecentShortcut(): RecentShortcut {
  return {
    id: 0,
    name: "",
    title: "",
    link: "",
    creatorId: 0,
    creatorName: "",
    createdTime: undefined,
    viewCount: 0,
    tags: [],
  };
}

export const RecentShortcut: MessageFns<RecentShortcut> = {
  encode(message: RecentShortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.link !== "") {
      writer.uint32(34).string(message.link);
    }
    if (message.creatorId !== 0) {
      writer.uint32(40).int32(message.creatorId);
    }
    if (message.creatorName !== "") {
      writer.uint32(50).string(message.creatorName);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(58).fork()).join();
    }
    if (message.viewCount !== 0) {
      writer.uint32(64).int32(message.viewCount);
    }
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentShortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentShortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.viewCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RecentShortcut>): RecentShortcut {
    return RecentShortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecentShortcut>): RecentShortcut {
    const message = createBaseRecentShortcut();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.link = object.link ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.creatorName = object.creatorName ?? "";
    message.createdTime = object.createdTime ?? undefined;
    message.viewCount = object.viewCount ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseRecentCollection(): RecentCollection {
  return {
    id: 0,
    name: "",
    title: "",
    description: "",
    creatorId: 0,
    creatorName: "",
    createdTime: undefined,
    shortcutCount: 0,
  };
}

export const RecentCollection: MessageFns<RecentCollection> = {
  encode(message: RecentCollection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.creatorId !== 0) {
      writer.uint32(40).int32(message.creatorId);
    }
    if (message.creatorName !== "") {
      writer.uint32(50).string(message.creatorName);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(58).fork()).join();
    }
    if (message.shortcutCount !== 0) {
      writer.uint32(64).int32(message.shortcutCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentCollection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentCollection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.shortcutCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RecentCollection>): RecentCollection {
    return RecentCollection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecentCollection>): RecentCollection {
    const message = createBaseRecentCollection();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.creatorName = object.creatorName ?? "";
    message.createdTime = object.createdTime ?? undefined;
    message.shortcutCount = object.shortcutCount ?? 0;
    return message;
  },
};

function createBaseRecentClick(): RecentClick {
  return {
    shortcutId: 0,
    shortcutName: "",
    shortcutTitle: "",
    shortcutLink: "",
    creatorId: 0,
    creatorName: "",
    clickedTime: undefined,
    userAgent: "",
    referer: "",
  };
}

export const RecentClick: MessageFns<RecentClick> = {
  encode(message: RecentClick, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcutId !== 0) {
      writer.uint32(8).int32(message.shortcutId);
    }
    if (message.shortcutName !== "") {
      writer.uint32(18).string(message.shortcutName);
    }
    if (message.shortcutTitle !== "") {
      writer.uint32(26).string(message.shortcutTitle);
    }
    if (message.shortcutLink !== "") {
      writer.uint32(34).string(message.shortcutLink);
    }
    if (message.creatorId !== 0) {
      writer.uint32(40).int32(message.creatorId);
    }
    if (message.creatorName !== "") {
      writer.uint32(50).string(message.creatorName);
    }
    if (message.clickedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.clickedTime), writer.uint32(58).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(66).string(message.userAgent);
    }
    if (message.referer !== "") {
      writer.uint32(74).string(message.referer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentClick {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentClick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shortcutId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shortcutName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shortcutTitle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shortcutLink = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.clickedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.referer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RecentClick>): RecentClick {
    return RecentClick.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecentClick>): RecentClick {
    const message = createBaseRecentClick();
    message.shortcutId = object.shortcutId ?? 0;
    message.shortcutName = object.shortcutName ?? "";
    message.shortcutTitle = object.shortcutTitle ?? "";
    message.shortcutLink = object.shortcutLink ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.creatorName = object.creatorName ?? "";
    message.clickedTime = object.clickedTime ?? undefined;
    message.userAgent = object.userAgent ?? "";
    message.referer = object.referer ?? "";
    return message;
  },
};

function createBaseMostClickedShortcut(): MostClickedShortcut {
  return { id: 0, name: "", title: "", link: "", creatorId: 0, creatorName: "", viewCount: 0, lastClicked: undefined };
}

export const MostClickedShortcut: MessageFns<MostClickedShortcut> = {
  encode(message: MostClickedShortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.link !== "") {
      writer.uint32(34).string(message.link);
    }
    if (message.creatorId !== 0) {
      writer.uint32(40).int32(message.creatorId);
    }
    if (message.creatorName !== "") {
      writer.uint32(50).string(message.creatorName);
    }
    if (message.viewCount !== 0) {
      writer.uint32(56).int32(message.viewCount);
    }
    if (message.lastClicked !== undefined) {
      Timestamp.encode(toTimestamp(message.lastClicked), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MostClickedShortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMostClickedShortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.viewCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.lastClicked = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MostClickedShortcut>): MostClickedShortcut {
    return MostClickedShortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MostClickedShortcut>): MostClickedShortcut {
    const message = createBaseMostClickedShortcut();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.link = object.link ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.creatorName = object.creatorName ?? "";
    message.viewCount = object.viewCount ?? 0;
    message.lastClicked = object.lastClicked ?? undefined;
    return message;
  },
};

function createBaseActivityItem(): ActivityItem {
  return {
    id: 0,
    type: ActivityType.ACTIVITY_TYPE_UNSPECIFIED,
    userId: 0,
    userName: "",
    createdTime: undefined,
    userCreated: undefined,
    shortcutCreated: undefined,
    shortcutViewed: undefined,
    collectionCreated: undefined,
    collectionViewed: undefined,
  };
}

export const ActivityItem: MessageFns<ActivityItem> = {
  encode(message: ActivityItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.type !== ActivityType.ACTIVITY_TYPE_UNSPECIFIED) {
      writer.uint32(16).int32(activityTypeToNumber(message.type));
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(34).string(message.userName);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(42).fork()).join();
    }
    if (message.userCreated !== undefined) {
      UserCreatedData.encode(message.userCreated, writer.uint32(82).fork()).join();
    }
    if (message.shortcutCreated !== undefined) {
      ShortcutCreatedData.encode(message.shortcutCreated, writer.uint32(90).fork()).join();
    }
    if (message.shortcutViewed !== undefined) {
      ShortcutViewedData.encode(message.shortcutViewed, writer.uint32(98).fork()).join();
    }
    if (message.collectionCreated !== undefined) {
      CollectionCreatedData.encode(message.collectionCreated, writer.uint32(106).fork()).join();
    }
    if (message.collectionViewed !== undefined) {
      CollectionViewedData.encode(message.collectionViewed, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = activityTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.userCreated = UserCreatedData.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.shortcutCreated = ShortcutCreatedData.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.shortcutViewed = ShortcutViewedData.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.collectionCreated = CollectionCreatedData.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.collectionViewed = CollectionViewedData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivityItem>): ActivityItem {
    return ActivityItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivityItem>): ActivityItem {
    const message = createBaseActivityItem();
    message.id = object.id ?? 0;
    message.type = object.type ?? ActivityType.ACTIVITY_TYPE_UNSPECIFIED;
    message.userId = object.userId ?? 0;
    message.userName = object.userName ?? "";
    message.createdTime = object.createdTime ?? undefined;
    message.userCreated = (object.userCreated !== undefined && object.userCreated !== null)
      ? UserCreatedData.fromPartial(object.userCreated)
      : undefined;
    message.shortcutCreated = (object.shortcutCreated !== undefined && object.shortcutCreated !== null)
      ? ShortcutCreatedData.fromPartial(object.shortcutCreated)
      : undefined;
    message.shortcutViewed = (object.shortcutViewed !== undefined && object.shortcutViewed !== null)
      ? ShortcutViewedData.fromPartial(object.shortcutViewed)
      : undefined;
    message.collectionCreated = (object.collectionCreated !== undefined && object.collectionCreated !== null)
      ? CollectionCreatedData.fromPartial(object.collectionCreated)
      : undefined;
    message.collectionViewed = (object.collectionViewed !== undefined && object.collectionViewed !== null)
      ? CollectionViewedData.fromPartial(object.collectionViewed)
      : undefined;
    return message;
  },
};

function createBaseUserCreatedData(): UserCreatedData {
  return { userId: 0, email: "", nickname: "", role: Role.ROLE_UNSPECIFIED };
}

export const UserCreatedData: MessageFns<UserCreatedData> = {
  encode(message: UserCreatedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.role !== Role.ROLE_UNSPECIFIED) {
      writer.uint32(32).int32(roleToNumber(message.role));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserCreatedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserCreatedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.role = roleFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserCreatedData>): UserCreatedData {
    return UserCreatedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserCreatedData>): UserCreatedData {
    const message = createBaseUserCreatedData();
    message.userId = object.userId ?? 0;
    message.email = object.email ?? "";
    message.nickname = object.nickname ?? "";
    message.role = object.role ?? Role.ROLE_UNSPECIFIED;
    return message;
  },
};

function createBaseShortcutCreatedData(): ShortcutCreatedData {
  return { shortcutId: 0, name: "", title: "", link: "" };
}

export const ShortcutCreatedData: MessageFns<ShortcutCreatedData> = {
  encode(message: ShortcutCreatedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcutId !== 0) {
      writer.uint32(8).int32(message.shortcutId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.link !== "") {
      writer.uint32(34).string(message.link);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutCreatedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutCreatedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shortcutId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.link = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutCreatedData>): ShortcutCreatedData {
    return ShortcutCreatedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutCreatedData>): ShortcutCreatedData {
    const message = createBaseShortcutCreatedData();
    message.shortcutId = object.shortcutId ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.link = object.link ?? "";
    return message;
  },
};

function createBaseShortcutViewedData(): ShortcutViewedData {
  return { shortcutId: 0, name: "", title: "", userAgent: "", referer: "" };
}

export const ShortcutViewedData: MessageFns<ShortcutViewedData> = {
  encode(message: ShortcutViewedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcutId !== 0) {
      writer.uint32(8).int32(message.shortcutId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.userAgent !== "") {
      writer.uint32(34).string(message.userAgent);
    }
    if (message.referer !== "") {
      writer.uint32(42).string(message.referer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutViewedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutViewedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shortcutId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.referer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutViewedData>): ShortcutViewedData {
    return ShortcutViewedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutViewedData>): ShortcutViewedData {
    const message = createBaseShortcutViewedData();
    message.shortcutId = object.shortcutId ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.userAgent = object.userAgent ?? "";
    message.referer = object.referer ?? "";
    return message;
  },
};

function createBaseCollectionCreatedData(): CollectionCreatedData {
  return { collectionId: 0, name: "", title: "", description: "" };
}

export const CollectionCreatedData: MessageFns<CollectionCreatedData> = {
  encode(message: CollectionCreatedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== 0) {
      writer.uint32(8).int32(message.collectionId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectionCreatedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectionCreatedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.collectionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CollectionCreatedData>): CollectionCreatedData {
    return CollectionCreatedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CollectionCreatedData>): CollectionCreatedData {
    const message = createBaseCollectionCreatedData();
    message.collectionId = object.collectionId ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCollectionViewedData(): CollectionViewedData {
  return { collectionId: 0, name: "", title: "" };
}

export const CollectionViewedData: MessageFns<CollectionViewedData> = {
  encode(message: CollectionViewedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collectionId !== 0) {
      writer.uint32(8).int32(message.collectionId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollectionViewedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollectionViewedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.collectionId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CollectionViewedData>): CollectionViewedData {
    return CollectionViewedData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CollectionViewedData>): CollectionViewedData {
    const message = createBaseCollectionViewedData();
    message.collectionId = object.collectionId ?? 0;
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseUserSummary(): UserSummary {
  return { userShortcutsCount: 0, userCollectionsCount: 0, userTotalClicks: 0, userTags: [] };
}

export const UserSummary: MessageFns<UserSummary> = {
  encode(message: UserSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userShortcutsCount !== 0) {
      writer.uint32(8).int32(message.userShortcutsCount);
    }
    if (message.userCollectionsCount !== 0) {
      writer.uint32(16).int32(message.userCollectionsCount);
    }
    if (message.userTotalClicks !== 0) {
      writer.uint32(24).int32(message.userTotalClicks);
    }
    for (const v of message.userTags) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userShortcutsCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userCollectionsCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userTotalClicks = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userTags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSummary>): UserSummary {
    return UserSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSummary>): UserSummary {
    const message = createBaseUserSummary();
    message.userShortcutsCount = object.userShortcutsCount ?? 0;
    message.userCollectionsCount = object.userCollectionsCount ?? 0;
    message.userTotalClicks = object.userTotalClicks ?? 0;
    message.userTags = object.userTags?.map((e) => e) || [];
    return message;
  },
};

export type ActivityServiceDefinition = typeof ActivityServiceDefinition;
export const ActivityServiceDefinition = {
  name: "ActivityService",
  fullName: "monotreme.api.v1.ActivityService",
  methods: {
    /** GetRecentActivity returns recent activity data for the dashboard */
    getRecentActivity: {
      name: "GetRecentActivity",
      requestType: GetRecentActivityRequest,
      requestStream: false,
      responseType: GetRecentActivityResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              99,
              116,
              105,
              118,
              105,
              116,
              105,
              101,
              115,
              47,
              114,
              101,
              99,
              101,
              110,
              116,
            ]),
          ],
        },
      },
    },
    /** GetActivitySummary returns summary statistics for the workspace */
    getActivitySummary: {
      name: "GetActivitySummary",
      requestType: GetActivitySummaryRequest,
      requestStream: false,
      responseType: GetActivitySummaryResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              28,
              18,
              26,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              99,
              116,
              105,
              118,
              105,
              116,
              105,
              101,
              115,
              47,
              115,
              117,
              109,
              109,
              97,
              114,
              121,
            ]),
          ],
        },
      },
    },
    /** ListActivities returns a paginated list of activities with filtering */
    listActivities: {
      name: "ListActivities",
      requestType: ListActivitiesRequest,
      requestStream: false,
      responseType: ListActivitiesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              20,
              18,
              18,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              99,
              116,
              105,
              118,
              105,
              116,
              105,
              101,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
