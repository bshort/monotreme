// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/shortcut.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Visibility, visibilityFromJSON, visibilityToNumber } from "./common";

export const protobufPackage = "slash.store";

export interface Shortcut {
  id: number;
  uuid: string;
  creatorId: number;
  createdTs: number;
  updatedTs: number;
  name: string;
  link: string;
  title: string;
  tags: string[];
  description: string;
  visibility: Visibility;
  ogMetadata?: OpenGraphMetadata | undefined;
}

export interface OpenGraphMetadata {
  title: string;
  description: string;
  image: string;
}

function createBaseShortcut(): Shortcut {
  return {
    id: 0,
    uuid: "",
    creatorId: 0,
    createdTs: 0,
    updatedTs: 0,
    name: "",
    link: "",
    title: "",
    tags: [],
    description: "",
    visibility: Visibility.VISIBILITY_UNSPECIFIED,
    ogMetadata: undefined,
  };
}

export const Shortcut: MessageFns<Shortcut> = {
  encode(message: Shortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(42).string(message.uuid);
    }
    if (message.creatorId !== 0) {
      writer.uint32(16).int32(message.creatorId);
    }
    if (message.createdTs !== 0) {
      writer.uint32(24).int64(message.createdTs);
    }
    if (message.updatedTs !== 0) {
      writer.uint32(32).int64(message.updatedTs);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.link !== "") {
      writer.uint32(58).string(message.link);
    }
    if (message.title !== "") {
      writer.uint32(66).string(message.title);
    }
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    if (message.visibility !== Visibility.VISIBILITY_UNSPECIFIED) {
      writer.uint32(88).int32(visibilityToNumber(message.visibility));
    }
    if (message.ogMetadata !== undefined) {
      OpenGraphMetadata.encode(message.ogMetadata, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdTs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.updatedTs = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.visibility = visibilityFromJSON(reader.int32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ogMetadata = OpenGraphMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Shortcut>): Shortcut {
    return Shortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Shortcut>): Shortcut {
    const message = createBaseShortcut();
    message.id = object.id ?? 0;
    message.uuid = object.uuid ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.createdTs = object.createdTs ?? 0;
    message.updatedTs = object.updatedTs ?? 0;
    message.name = object.name ?? "";
    message.link = object.link ?? "";
    message.title = object.title ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.description = object.description ?? "";
    message.visibility = object.visibility ?? Visibility.VISIBILITY_UNSPECIFIED;
    message.ogMetadata = (object.ogMetadata !== undefined && object.ogMetadata !== null)
      ? OpenGraphMetadata.fromPartial(object.ogMetadata)
      : undefined;
    return message;
  },
};

function createBaseOpenGraphMetadata(): OpenGraphMetadata {
  return { title: "", description: "", image: "" };
}

export const OpenGraphMetadata: MessageFns<OpenGraphMetadata> = {
  encode(message: OpenGraphMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenGraphMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenGraphMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<OpenGraphMetadata>): OpenGraphMetadata {
    return OpenGraphMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpenGraphMetadata>): OpenGraphMetadata {
    const message = createBaseOpenGraphMetadata();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
