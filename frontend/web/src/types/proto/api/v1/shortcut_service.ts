// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/shortcut_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { FieldMask } from "../../google/protobuf/field_mask";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Visibility, visibilityFromJSON, visibilityToNumber } from "./common";

export const protobufPackage = "slash.api.v1";

export interface Shortcut {
  id: number;
  uuid: string;
  creatorId: number;
  createdTime?: Date | undefined;
  updatedTime?: Date | undefined;
  name: string;
  link: string;
  title: string;
  tags: string[];
  description: string;
  visibility: Visibility;
  viewCount: number;
  ogMetadata?: Shortcut_OpenGraphMetadata | undefined;
}

export interface Shortcut_OpenGraphMetadata {
  title: string;
  description: string;
  image: string;
}

export interface ListShortcutsRequest {
}

export interface ListShortcutsResponse {
  shortcuts: Shortcut[];
}

export interface GetShortcutRequest {
  id: number;
}

export interface GetShortcutByNameRequest {
  name: string;
}

export interface CreateShortcutRequest {
  shortcut?: Shortcut | undefined;
}

export interface UpdateShortcutRequest {
  shortcut?: Shortcut | undefined;
  updateMask?: string[] | undefined;
}

export interface DeleteShortcutRequest {
  id: number;
}

export interface GetShortcutAnalyticsRequest {
  id: number;
}

export interface GetShortcutAnalyticsResponse {
  references: GetShortcutAnalyticsResponse_AnalyticsItem[];
  devices: GetShortcutAnalyticsResponse_AnalyticsItem[];
  browsers: GetShortcutAnalyticsResponse_AnalyticsItem[];
}

export interface GetShortcutAnalyticsResponse_AnalyticsItem {
  name: string;
  count: number;
}

function createBaseShortcut(): Shortcut {
  return {
    id: 0,
    uuid: "",
    creatorId: 0,
    createdTime: undefined,
    updatedTime: undefined,
    name: "",
    link: "",
    title: "",
    tags: [],
    description: "",
    visibility: Visibility.VISIBILITY_UNSPECIFIED,
    viewCount: 0,
    ogMetadata: undefined,
  };
}

export const Shortcut: MessageFns<Shortcut> = {
  encode(message: Shortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(42).string(message.uuid);
    }
    if (message.creatorId !== 0) {
      writer.uint32(16).int32(message.creatorId);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(26).fork()).join();
    }
    if (message.updatedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedTime), writer.uint32(34).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.link !== "") {
      writer.uint32(58).string(message.link);
    }
    if (message.title !== "") {
      writer.uint32(66).string(message.title);
    }
    for (const v of message.tags) {
      writer.uint32(74).string(v!);
    }
    if (message.description !== "") {
      writer.uint32(82).string(message.description);
    }
    if (message.visibility !== Visibility.VISIBILITY_UNSPECIFIED) {
      writer.uint32(88).int32(visibilityToNumber(message.visibility));
    }
    if (message.viewCount !== 0) {
      writer.uint32(96).int32(message.viewCount);
    }
    if (message.ogMetadata !== undefined) {
      Shortcut_OpenGraphMetadata.encode(message.ogMetadata, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.visibility = visibilityFromJSON(reader.int32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.viewCount = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.ogMetadata = Shortcut_OpenGraphMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Shortcut>): Shortcut {
    return Shortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Shortcut>): Shortcut {
    const message = createBaseShortcut();
    message.id = object.id ?? 0;
    message.uuid = object.uuid ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.createdTime = object.createdTime ?? undefined;
    message.updatedTime = object.updatedTime ?? undefined;
    message.name = object.name ?? "";
    message.link = object.link ?? "";
    message.title = object.title ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.description = object.description ?? "";
    message.visibility = object.visibility ?? Visibility.VISIBILITY_UNSPECIFIED;
    message.viewCount = object.viewCount ?? 0;
    message.ogMetadata = (object.ogMetadata !== undefined && object.ogMetadata !== null)
      ? Shortcut_OpenGraphMetadata.fromPartial(object.ogMetadata)
      : undefined;
    return message;
  },
};

function createBaseShortcut_OpenGraphMetadata(): Shortcut_OpenGraphMetadata {
  return { title: "", description: "", image: "" };
}

export const Shortcut_OpenGraphMetadata: MessageFns<Shortcut_OpenGraphMetadata> = {
  encode(message: Shortcut_OpenGraphMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.image !== "") {
      writer.uint32(26).string(message.image);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shortcut_OpenGraphMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcut_OpenGraphMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.image = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Shortcut_OpenGraphMetadata>): Shortcut_OpenGraphMetadata {
    return Shortcut_OpenGraphMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Shortcut_OpenGraphMetadata>): Shortcut_OpenGraphMetadata {
    const message = createBaseShortcut_OpenGraphMetadata();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.image = object.image ?? "";
    return message;
  },
};

function createBaseListShortcutsRequest(): ListShortcutsRequest {
  return {};
}

export const ListShortcutsRequest: MessageFns<ListShortcutsRequest> = {
  encode(_: ListShortcutsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShortcutsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShortcutsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListShortcutsRequest>): ListShortcutsRequest {
    return ListShortcutsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListShortcutsRequest>): ListShortcutsRequest {
    const message = createBaseListShortcutsRequest();
    return message;
  },
};

function createBaseListShortcutsResponse(): ListShortcutsResponse {
  return { shortcuts: [] };
}

export const ListShortcutsResponse: MessageFns<ListShortcutsResponse> = {
  encode(message: ListShortcutsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.shortcuts) {
      Shortcut.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShortcutsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShortcutsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcuts.push(Shortcut.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListShortcutsResponse>): ListShortcutsResponse {
    return ListShortcutsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShortcutsResponse>): ListShortcutsResponse {
    const message = createBaseListShortcutsResponse();
    message.shortcuts = object.shortcuts?.map((e) => Shortcut.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetShortcutRequest(): GetShortcutRequest {
  return { id: 0 };
}

export const GetShortcutRequest: MessageFns<GetShortcutRequest> = {
  encode(message: GetShortcutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShortcutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShortcutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetShortcutRequest>): GetShortcutRequest {
    return GetShortcutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShortcutRequest>): GetShortcutRequest {
    const message = createBaseGetShortcutRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetShortcutByNameRequest(): GetShortcutByNameRequest {
  return { name: "" };
}

export const GetShortcutByNameRequest: MessageFns<GetShortcutByNameRequest> = {
  encode(message: GetShortcutByNameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShortcutByNameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShortcutByNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetShortcutByNameRequest>): GetShortcutByNameRequest {
    return GetShortcutByNameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShortcutByNameRequest>): GetShortcutByNameRequest {
    const message = createBaseGetShortcutByNameRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateShortcutRequest(): CreateShortcutRequest {
  return { shortcut: undefined };
}

export const CreateShortcutRequest: MessageFns<CreateShortcutRequest> = {
  encode(message: CreateShortcutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcut !== undefined) {
      Shortcut.encode(message.shortcut, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShortcutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShortcutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcut = Shortcut.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateShortcutRequest>): CreateShortcutRequest {
    return CreateShortcutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateShortcutRequest>): CreateShortcutRequest {
    const message = createBaseCreateShortcutRequest();
    message.shortcut = (object.shortcut !== undefined && object.shortcut !== null)
      ? Shortcut.fromPartial(object.shortcut)
      : undefined;
    return message;
  },
};

function createBaseUpdateShortcutRequest(): UpdateShortcutRequest {
  return { shortcut: undefined, updateMask: undefined };
}

export const UpdateShortcutRequest: MessageFns<UpdateShortcutRequest> = {
  encode(message: UpdateShortcutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcut !== undefined) {
      Shortcut.encode(message.shortcut, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShortcutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShortcutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcut = Shortcut.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateShortcutRequest>): UpdateShortcutRequest {
    return UpdateShortcutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateShortcutRequest>): UpdateShortcutRequest {
    const message = createBaseUpdateShortcutRequest();
    message.shortcut = (object.shortcut !== undefined && object.shortcut !== null)
      ? Shortcut.fromPartial(object.shortcut)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteShortcutRequest(): DeleteShortcutRequest {
  return { id: 0 };
}

export const DeleteShortcutRequest: MessageFns<DeleteShortcutRequest> = {
  encode(message: DeleteShortcutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteShortcutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteShortcutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteShortcutRequest>): DeleteShortcutRequest {
    return DeleteShortcutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteShortcutRequest>): DeleteShortcutRequest {
    const message = createBaseDeleteShortcutRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetShortcutAnalyticsRequest(): GetShortcutAnalyticsRequest {
  return { id: 0 };
}

export const GetShortcutAnalyticsRequest: MessageFns<GetShortcutAnalyticsRequest> = {
  encode(message: GetShortcutAnalyticsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShortcutAnalyticsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShortcutAnalyticsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetShortcutAnalyticsRequest>): GetShortcutAnalyticsRequest {
    return GetShortcutAnalyticsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShortcutAnalyticsRequest>): GetShortcutAnalyticsRequest {
    const message = createBaseGetShortcutAnalyticsRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetShortcutAnalyticsResponse(): GetShortcutAnalyticsResponse {
  return { references: [], devices: [], browsers: [] };
}

export const GetShortcutAnalyticsResponse: MessageFns<GetShortcutAnalyticsResponse> = {
  encode(message: GetShortcutAnalyticsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.references) {
      GetShortcutAnalyticsResponse_AnalyticsItem.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.devices) {
      GetShortcutAnalyticsResponse_AnalyticsItem.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.browsers) {
      GetShortcutAnalyticsResponse_AnalyticsItem.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShortcutAnalyticsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShortcutAnalyticsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.references.push(GetShortcutAnalyticsResponse_AnalyticsItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.devices.push(GetShortcutAnalyticsResponse_AnalyticsItem.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.browsers.push(GetShortcutAnalyticsResponse_AnalyticsItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetShortcutAnalyticsResponse>): GetShortcutAnalyticsResponse {
    return GetShortcutAnalyticsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShortcutAnalyticsResponse>): GetShortcutAnalyticsResponse {
    const message = createBaseGetShortcutAnalyticsResponse();
    message.references = object.references?.map((e) => GetShortcutAnalyticsResponse_AnalyticsItem.fromPartial(e)) || [];
    message.devices = object.devices?.map((e) => GetShortcutAnalyticsResponse_AnalyticsItem.fromPartial(e)) || [];
    message.browsers = object.browsers?.map((e) => GetShortcutAnalyticsResponse_AnalyticsItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetShortcutAnalyticsResponse_AnalyticsItem(): GetShortcutAnalyticsResponse_AnalyticsItem {
  return { name: "", count: 0 };
}

export const GetShortcutAnalyticsResponse_AnalyticsItem: MessageFns<GetShortcutAnalyticsResponse_AnalyticsItem> = {
  encode(message: GetShortcutAnalyticsResponse_AnalyticsItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShortcutAnalyticsResponse_AnalyticsItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShortcutAnalyticsResponse_AnalyticsItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetShortcutAnalyticsResponse_AnalyticsItem>): GetShortcutAnalyticsResponse_AnalyticsItem {
    return GetShortcutAnalyticsResponse_AnalyticsItem.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetShortcutAnalyticsResponse_AnalyticsItem>,
  ): GetShortcutAnalyticsResponse_AnalyticsItem {
    const message = createBaseGetShortcutAnalyticsResponse_AnalyticsItem();
    message.name = object.name ?? "";
    message.count = object.count ?? 0;
    return message;
  },
};

export type ShortcutServiceDefinition = typeof ShortcutServiceDefinition;
export const ShortcutServiceDefinition = {
  name: "ShortcutService",
  fullName: "slash.api.v1.ShortcutService",
  methods: {
    /** ListShortcuts returns a list of shortcuts. */
    listShortcuts: {
      name: "ListShortcuts",
      requestType: ListShortcutsRequest,
      requestStream: false,
      responseType: ListShortcutsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([19, 18, 17, 47, 97, 112, 105, 47, 118, 49, 47, 115, 104, 111, 114, 116, 99, 117, 116, 115]),
          ],
        },
      },
    },
    /** GetShortcut returns a shortcut by id. */
    getShortcut: {
      name: "GetShortcut",
      requestType: GetShortcutRequest,
      requestStream: false,
      responseType: Shortcut,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([2, 105, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** GetShortcutByName returns a shortcut by name. */
    getShortcutByName: {
      name: "GetShortcutByName",
      requestType: GetShortcutByNameRequest,
      requestStream: false,
      responseType: Shortcut,
      responseStream: false,
      options: {},
    },
    /** CreateShortcut creates a shortcut. */
    createShortcut: {
      name: "CreateShortcut",
      requestType: CreateShortcutRequest,
      requestStream: false,
      responseType: Shortcut,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              29,
              58,
              8,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              34,
              17,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              115,
            ]),
          ],
        },
      },
    },
    /** UpdateShortcut updates a shortcut. */
    updateShortcut: {
      name: "UpdateShortcut",
      requestType: UpdateShortcutRequest,
      requestStream: false,
      responseType: Shortcut,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              20,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            new Uint8Array([
              43,
              58,
              8,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              26,
              31,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              115,
              47,
              123,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              46,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** DeleteShortcut deletes a shortcut by name. */
    deleteShortcut: {
      name: "DeleteShortcut",
      requestType: DeleteShortcutRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([2, 105, 100])],
          578365826: [
            new Uint8Array([
              24,
              42,
              22,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** GetShortcutAnalytics returns the analytics for a shortcut. */
    getShortcutAnalytics: {
      name: "GetShortcutAnalytics",
      requestType: GetShortcutAnalyticsRequest,
      requestStream: false,
      responseType: GetShortcutAnalyticsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([2, 105, 100])],
          578365826: [
            new Uint8Array([
              34,
              18,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              97,
              110,
              97,
              108,
              121,
              116,
              105,
              99,
              115,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
