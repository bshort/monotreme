// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/activity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "monotreme.store";

export interface ActivityShorcutCreatePayload {
  shortcutId: number;
}

export interface ActivityShorcutViewPayload {
  shortcutId: number;
  ip: string;
  referer: string;
  userAgent: string;
  params: { [key: string]: ActivityShorcutViewPayload_ValueList };
}

export interface ActivityShorcutViewPayload_ParamsEntry {
  key: string;
  value?: ActivityShorcutViewPayload_ValueList | undefined;
}

export interface ActivityShorcutViewPayload_ValueList {
  values: string[];
}

function createBaseActivityShorcutCreatePayload(): ActivityShorcutCreatePayload {
  return { shortcutId: 0 };
}

export const ActivityShorcutCreatePayload: MessageFns<ActivityShorcutCreatePayload> = {
  encode(message: ActivityShorcutCreatePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcutId !== 0) {
      writer.uint32(8).int32(message.shortcutId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityShorcutCreatePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityShorcutCreatePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shortcutId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivityShorcutCreatePayload>): ActivityShorcutCreatePayload {
    return ActivityShorcutCreatePayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivityShorcutCreatePayload>): ActivityShorcutCreatePayload {
    const message = createBaseActivityShorcutCreatePayload();
    message.shortcutId = object.shortcutId ?? 0;
    return message;
  },
};

function createBaseActivityShorcutViewPayload(): ActivityShorcutViewPayload {
  return { shortcutId: 0, ip: "", referer: "", userAgent: "", params: {} };
}

export const ActivityShorcutViewPayload: MessageFns<ActivityShorcutViewPayload> = {
  encode(message: ActivityShorcutViewPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcutId !== 0) {
      writer.uint32(8).int32(message.shortcutId);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.referer !== "") {
      writer.uint32(26).string(message.referer);
    }
    if (message.userAgent !== "") {
      writer.uint32(34).string(message.userAgent);
    }
    Object.entries(message.params).forEach(([key, value]) => {
      ActivityShorcutViewPayload_ParamsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityShorcutViewPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityShorcutViewPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shortcutId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.referer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = ActivityShorcutViewPayload_ParamsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.params[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivityShorcutViewPayload>): ActivityShorcutViewPayload {
    return ActivityShorcutViewPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivityShorcutViewPayload>): ActivityShorcutViewPayload {
    const message = createBaseActivityShorcutViewPayload();
    message.shortcutId = object.shortcutId ?? 0;
    message.ip = object.ip ?? "";
    message.referer = object.referer ?? "";
    message.userAgent = object.userAgent ?? "";
    message.params = Object.entries(object.params ?? {}).reduce<
      { [key: string]: ActivityShorcutViewPayload_ValueList }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = ActivityShorcutViewPayload_ValueList.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseActivityShorcutViewPayload_ParamsEntry(): ActivityShorcutViewPayload_ParamsEntry {
  return { key: "", value: undefined };
}

export const ActivityShorcutViewPayload_ParamsEntry: MessageFns<ActivityShorcutViewPayload_ParamsEntry> = {
  encode(message: ActivityShorcutViewPayload_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ActivityShorcutViewPayload_ValueList.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityShorcutViewPayload_ParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityShorcutViewPayload_ParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ActivityShorcutViewPayload_ValueList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivityShorcutViewPayload_ParamsEntry>): ActivityShorcutViewPayload_ParamsEntry {
    return ActivityShorcutViewPayload_ParamsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivityShorcutViewPayload_ParamsEntry>): ActivityShorcutViewPayload_ParamsEntry {
    const message = createBaseActivityShorcutViewPayload_ParamsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ActivityShorcutViewPayload_ValueList.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseActivityShorcutViewPayload_ValueList(): ActivityShorcutViewPayload_ValueList {
  return { values: [] };
}

export const ActivityShorcutViewPayload_ValueList: MessageFns<ActivityShorcutViewPayload_ValueList> = {
  encode(message: ActivityShorcutViewPayload_ValueList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActivityShorcutViewPayload_ValueList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivityShorcutViewPayload_ValueList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivityShorcutViewPayload_ValueList>): ActivityShorcutViewPayload_ValueList {
    return ActivityShorcutViewPayload_ValueList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivityShorcutViewPayload_ValueList>): ActivityShorcutViewPayload_ValueList {
    const message = createBaseActivityShorcutViewPayload_ValueList();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
